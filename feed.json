{
    "version": "https://jsonfeed.org/version/1",
    "title": "镜碑",
    "subtitle": "镜影行",
    "icon": "https://blog.yukx.io/images/favicon.ico",
    "description": "你能接受自己的注视吗",
    "home_page_url": "https://blog.yukx.io",
    "items": [
        {
            "id": "https://blog.yukx.io/2022/06/game-dev-journal-1-hud-minimap/",
            "url": "https://blog.yukx.io/2022/06/game-dev-journal-1-hud-minimap/",
            "title": "游戏开发日志(其一)：HUD、小地图",
            "date_published": "2022-06-11T18:38:51.000Z",
            "content_html": "<p>:::<br />\n 某人日常不务正业务现已开拓至游戏开发挥年复一年的沉积极放光吧！<br />\n:::</p>\n<div class=\"note default\">\n<p>游戏具体情况暂且不提，后续也将在 github 上开源。</p>\n</div>\n<h2 id=\"hud\"><a class=\"anchor\" href=\"#hud\">#</a> HUD</h2>\n<p>首先我们秉持优良传统，创建一个根 GameObject，<br />\n在其内部添加 Canvas，在 Canvas 内添加我们需要的 UI 物体即可。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/hxYuki/img-base@latest/img/object-hierachy.png\" alt=\"对象层级示例\" /></p>\n<h2 id=\"小地图\"><a class=\"anchor\" href=\"#小地图\">#</a> 小地图</h2>\n<p>小地图有很多种实现方法，这里暂且采用最简单的，添加第二个 Camera 的方法。</p>\n<h3 id=\"custom-render-texture\"><a class=\"anchor\" href=\"#custom-render-texture\">#</a> Custom Render Texture</h3>\n<p>首先新建一个 Custom Render Texture, 用于接收摄像机的内容并显示在指定位置。</p>\n<h3 id=\"map-camera\"><a class=\"anchor\" href=\"#map-camera\">#</a> Map Camera</h3>\n<p>新建一个 Camera，并创建一个 layer: minimap，用于显示单位的缩略图。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/hxYuki/img-base@main/img/20220612140021.png\" alt=\"Camera 属性\" /></p>\n<p>设置 Clear Flag 为 Solid Color ，<ruby>投影<rp> (</rp><rt>Projection</rt><rp>)</rp></ruby> 为<ruby>正交<rp> (</rp><rt>Orthographic</rt><rp>)</rp></ruby>，以排除透视的影响。<br />\n设置 <strong>Culling Mask</strong> 取消选中其他 layer 仅保留刚刚新建的 minimap，这样小地图中不会显示多余的内容。(在其他 Camera 中也需要保持不要选中 minimap)</p>\n<p>设置 Target Texture 为刚刚创建的 Custom Render Texture。</p>\n<h3 id=\"minimap\"><a class=\"anchor\" href=\"#minimap\">#</a> Minimap</h3>\n<p>在你喜欢的地方添加一个  <code>UI &gt; Raw Image</code> ，将其 Texture 设置为刚刚创建的 Custom Render Texture。<br />\n至此小地图的基本显示功能完成，后续需要在想要显示在地图中的物体内完成。</p>\n<h3 id=\"其他单位\"><a class=\"anchor\" href=\"#其他单位\">#</a> 其他单位</h3>\n<p>在想要显示的物体内添加一个 Sprite，指定其 Layer 为 minimap。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/hxYuki/img-base@main/img/20220612143055.png\" alt=\"示例效果\" /></p>\n<p>大功告成！</p>\n<div class=\"note info\">\n<p>Camera size 与 Worldspace 内的坐标尺度一致，可按需要调整地图大小。</p>\n</div>\n",
            "tags": [
                "开发随记",
                "游戏开发",
                "conquest of star",
                "Unity",
                "HUD",
                "小地图"
            ]
        },
        {
            "id": "https://blog.yukx.io/2022/06/one-possible-reason-for-steam-not-rememebering-password/",
            "url": "https://blog.yukx.io/2022/06/one-possible-reason-for-steam-not-rememebering-password/",
            "title": "Steam记住密码失效的一种原因",
            "date_published": "2022-06-02T06:14:28.000Z",
            "content_html": "<p>你可能有第二个设备在登录时记住了密码，第一个设备就无法记住密码了。</p>\n<p>取消所有其他设备授权也没有用，<br />\n实在是让我恼火了好久，直到今天打开了很久没用的另一个电脑，退出了上面的 Steam。</p>\n",
            "tags": [
                "闲话",
                "Steam无法记住密码",
                "Steam"
            ]
        },
        {
            "id": "https://blog.yukx.io/2022/03/rust-try/",
            "url": "https://blog.yukx.io/2022/03/rust-try/",
            "title": "Rust初体验",
            "date_published": "2022-03-26T06:10:56.000Z",
            "content_html": "<p>近日来心有戚戚终日惶惶，游戏亦觉无趣，便想着尝试下一直以来想学下的 Rust</p>\n<p>直接进行一个<a href=\"https://kaisery.github.io/trpl-zh-cn/title-page.html\"> The Book</a> 的搜索！ <span class=\"rainbow\">汉化赛高！</span> <span class=\"spoiler\" title=\"你知道得太多了\">话说这个中文版的 Rust 竟然比官网还高</span></p>\n<p>直接进行一个小练！</p>\n<p>看完了前三章，算是对语法方面做了个基本的了解，体验下来有种奇妙的舒适感，比如变量隐藏、 <code>.expect()</code>  或 <code>match</code>  进行的错误处理、或是 <code>break</code>  返回值这种东西在有需要的时候真的是能极大的提升幸福感，让人对后面的内容产生了更浓厚的期待。</p>\n<p>浅尝至此，暂且搁笔。另请允许我附上自己渣的斐波那契数列。</p>\n<figure class=\"highlight rust\"><figcaption data-lang=\"rust\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> n <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to open input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to parse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"&#123;&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">match</span> n <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token number\">1</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token number\">2</span> <span class=\"token operator\">=></span> b<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">3</span><span class=\"token punctuation\">..=</span>n <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        b <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        r <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                r</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "俗世以外的消遣",
                "Rust",
                "学习随记"
            ]
        },
        {
            "id": "https://blog.yukx.io/2021/11/%E8%AE%A9%E9%9D%99%E6%80%81%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A3%9E%E8%B5%B7%E6%9D%A5/",
            "url": "https://blog.yukx.io/2021/11/%E8%AE%A9%E9%9D%99%E6%80%81%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A3%9E%E8%B5%B7%E6%9D%A5/",
            "title": "让静态的博客飞起来",
            "date_published": "2021-11-16T05:54:43.000Z",
            "content_html": "<p>最近终于算是折腾完了博客、主题这些<s>要命</s>的东西，中途还给咱选择的主题修了 BUG <span class=\"spoiler\" title=\"你知道得太多了\">一度还因为 BUG 想自己写主题来着的说</span>。</p>\n<p>不过，终于，现在一切都已经妥当，让 CDN 什么的先在一边放着吧！我要开始输出了！我看着托管博客的仓库，突然邪念大起：</p>\n<p>「用 Github Actions 自动部署博客已经是基操了，再加上 Github Codespaces 岂不是就再也不用被仓库的位置限制了？」</p>\n<p>不过这套流程的难点还是在于要配置好 Github Actions 的自动部署，大体流程而言都差不多，生成一对密钥，公钥放  <code>[username].github.io</code>  ，私钥放到博客源仓库的  <code>secret</code>  中，在市场里找一套部署 Hexo 的 Action 就大功告成 ——</p>\n<p>Star 最多的 hexo-action 只有简单的部署操作，而本博客启用了基于 algolia 的搜索功能，需要在部署前将改动同步至 Algolia ，又不想花时间再精挑细选了，于是动了下脑子，基于 hexo-action 添加了一份执行  <code>hexo a</code>  的选项<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，这下就完美解决了个人的需求，可以愉快的随处<ruby>写<rp> (</rp><rt>guan</rt><rp>)</rp> 文章<rp> (</rp><rt>shui</rt><rp>)</rp></ruby> 了！</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>个人魔改的 hexo action 为  <code>hxYuki/hexo-action@master</code>  欢迎取用。 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "生命在于折腾",
                "MyBlog",
                "言尽于行",
                "开发之外的事",
                "Github Codespaces",
                "Github Actions",
                "Algolia"
            ]
        },
        {
            "id": "https://blog.yukx.io/2021/10/CSharp%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%93%8D%E4%BD%9C/",
            "url": "https://blog.yukx.io/2021/10/CSharp%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%93%8D%E4%BD%9C/",
            "title": "C# 的一些问题操作",
            "date_published": "2021-10-27T16:45:24.000Z",
            "content_html": "<h2 id=\"前情提要\"><a class=\"anchor\" href=\"#前情提要\">#</a> 前情提要</h2>\n<p>作为 <code>async</code>   <code>await</code>  关键字源头的 C#，搞些异步操作已经是很舒心的了，不过近来 <code>.Net 6</code>  就要出了，新版本里默认启用了 <code>nullable</code>  特性，当享受着全局的空安全的时候，可能莫名其妙的发现有些地方出现了碍眼的<ins class=\"wavy success\">绿色下划波浪线</ins>。 💢</p>\n<h2 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h2>\n<p>问题代码多半是这样:</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">await</span> something<span class=\"token punctuation\">?.</span><span class=\"token function\">BalaBala</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后警告你<ruby>解引用了一个可能为空的引用<rp> (</rp><rt>Dereference  of  a possibly null reference</rt><rp>)</rp></ruby>。<br />\n这是因为 <code>?.</code>  操作符在变量为 <code>null</code>  的时候会把自己整段都变为 <code>null</code> ，也就是说整个 <code>await</code>  等待了一个 <code>Task&lt;ReturnType&gt;?</code> ，而目前的 <code>await</code>  并不想等待一个寂寞。<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<h2 id=\"workaround\"><a class=\"anchor\" href=\"#workaround\">#</a> Workaround</h2>\n<p>作为有些许追求的人，一定要找个比较优雅的写法，结合了一些观察学习，我的答案是：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FunExt</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">SafeExecute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Task<span class=\"token punctuation\">?</span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>task<span class=\"token operator\">??</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>考虑到可能的执行失败时需要默认值的情况，可以加一个这个: <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup> <span class=\"spoiler\" title=\"你知道得太多了\">？强烈怀疑，真的会有这种需求吗</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">SafeExecute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">?</span></span> task<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> task <span class=\"token operator\">??</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用方式为：</p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">?.</span><span class=\"token function\">BalaBalaA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SafeExcute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>虽然还是没能避免多加一对括号，不过总比去进行麻烦的判断要好了那么一点。</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>确实有这么一个新特性的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9jc2hhcnBsYW5nL2Jsb2IvbWFpbi9wcm9wb3NhbHMvbnVsbC1jb25kaXRpb25hbC1hd2FpdC5tZA==\" title=\"null conditional await\">提议</span>，我开始看了觉得不明所以，直到自己被警告秀了一脸 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>原写法来自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc1NTEwOTAvYmVzdC13YXktdG8taGFuZGxlLW51bGwtdGFzay1pbnNpZGUtYXN5bmMtbWV0aG9k\" title=\"By BrainSlugs83\">StackOverflow</span> 不过其并未考虑到 <code>default(T)</code>  的类型为 <code>T?</code> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "开发随记",
                "言尽于行",
                "C#",
                "await",
                "nullable"
            ]
        },
        {
            "id": "https://blog.yukx.io/2021/07/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6hint%E5%B7%A5%E5%85%B7%E7%9A%84%E6%83%B3%E6%B3%95/",
            "url": "https://blog.yukx.io/2021/07/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6hint%E5%B7%A5%E5%85%B7%E7%9A%84%E6%83%B3%E6%B3%95/",
            "title": "关于一个配置文件hint工具的想法",
            "date_published": "2021-07-20T16:00:00.000Z",
            "content_html": "<h2 id=\"始\"><a class=\"anchor\" href=\"#始\">#</a> 始</h2>\n<p>最近试着弄了下一直想做的博客，选主题选的眼都花了（笑），然而年幼无知的我还不知道后面有什么东西在等着我 —— 指一大堆乱七八糟的配置文件，它们天真而又纯洁，等着我来带它们走向光明的未来。<br />\n其实认真的讲，我个人始终有一种追求：人应该尽可能少的进行没有意义劳作，而很明显，如果我想以一种预先约定的格式进行输入，而需要我全面学习这个约定，否则便无从知晓某一项是否被包含在约定中，也算是部分无意义 —— 个人来讲倾向于在尝试中学习，如果能在输入的时候把可用的项目全部提供就很令人舒适，要是命名又十分直观真是再感激不过了。</p>\n<p>其实在此之前有遇到过包含自动提示的配置文件，比如 <code>VS Code</code>  自身的配置文件，或者是 <code>Visual Studio</code>  的 <code>JSON 架构</code> ，都能实现配置项、配置值的提示，不过一个是靠编辑器本身开挂，一个普及度低写起来也繁琐的一 * 并且还是依赖了编辑器的外挂从网络获取架构信息。<br />\n所以我想的是为配置文件写一个配置文件，再写个编辑器扩展什么的来进行 Hint。编写起来也得很简洁才行，方便使用。<span class=\"spoiler\" title=\"你知道得太多了\">毕竟我也是个臭敲代码的，代码以外的东西越简单越好</span></p>\n<h2 id=\"初步的设计\"><a class=\"anchor\" href=\"#初步的设计\">#</a> 初步的设计</h2>\n<h3 id=\"specs\"><a class=\"anchor\" href=\"#specs\">#</a> Specs</h3>\n<p>文件名： <code>.hintc</code> <br />\n 对于同目录内所有子目录均有效，且覆盖父目录中的 <code>.hintc</code>  文件</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>config.json &gt;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    * connection &gt;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        * username &#x3D; string</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        * password &#x3D; string</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    - options &gt; </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        - encryption &#x3D; bool</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        - method &#x3D; (foo, bar)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        - alternate_conn : @connection &#x2F;&#x2F; @config.json&gt;connection</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        - timeout &#x3D; number</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        - load :</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            * type &#x3D; string</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            * data &#x3D; string</pre></td></tr></table></figure><p>当前预计使用如下关键字 <code>string</code>   <code>bool</code>   <code>number</code>   <code>date</code>   <code>&gt;</code>   <code>=</code>   <code>:</code>   <code>*</code>   <code>-</code>   <code>@</code>   <code>(</code>   <code>)</code>   <code>,</code></p>\n<p><code>&gt;</code>  表明项包含后续定义的字段<br />\n <code>=</code>  表明该项接受一个直接值<br />\n <code>:</code>  表明项接受一个其后类型的数组</p>\n<p><code>*</code>  声明该项在父项中为必须项<br />\n <code>-</code>  声明该项在父项中为可选项</p>\n<p><code>string</code>   <code>bool</code>   <code>number</code>   <code>date</code>  等字符串于值类型标识<br />\n <code>@</code>  后接一个已经定义过的项，其值与指向的项内容相同<br />\n <code>(</code>   <code>)</code>  用于表示一个列表，其值为其中任意一个元素<br />\n <code>,</code>  元素分隔</p>\n<div class=\"note info note\">\n<p>该类符号用于进行值验证，与正则表达式接近，但似乎无法实现详细的提示，需要进一步实现尝试。</p>\n</div>\n<h3 id=\"从声明文件生成其配置文件\"><a class=\"anchor\" href=\"#从声明文件生成其配置文件\">#</a> 从声明文件生成其配置文件</h3>\n<p>既然这么一个声明文件是具体配置无关的，那么理应可以通过扩展的形式支持多种配置文件。 e.g. JSON, yaml … <s>似乎一笔带过了什么难搞的东西</s></p>\n<p>那么反过来从这一个声明文件生成一个样例配置文件应该也是可行的，于是就愉快的把坑挖大了。</p>\n<h2 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>还没想好名字，不如叫 ConfHint 吧，后缀名确定是 hintc 了吗？</p>\n<p><span class=\"spoiler blur\" title=\"你知道得太多了\">h 这个字母是真烦，前面可以接 80% 的字母都不意外</span></p>\n",
            "tags": [
                "挖坑",
                "开发",
                "配置文件 Hint 工具",
                "思维火花"
            ]
        },
        {
            "id": "https://blog.yukx.io/2021/06/hello-world/",
            "url": "https://blog.yukx.io/2021/06/hello-world/",
            "title": "Hello World",
            "date_published": "2021-06-29T06:20:21.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\" title=\"1234\">Hexo</span>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"&nbsp;$\"></td><td><pre>hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"&nbsp;$\"></td><td><pre>hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"&nbsp;$\"></td><td><pre>hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"&nbsp;$\"></td><td><pre>hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "hello world"
            ]
        }
    ]
}