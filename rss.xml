<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>行于期雪</title>
    <link>https://blog.yukx.io/</link>
    
    <atom:link href="https://blog.yukx.io/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>寒茫独躅处，忽如有人行</description>
    <pubDate>Mon, 12 Dec 2022 14:55:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ObservableCollection 之批次更新</title>
      <link>https://blog.yukx.io/2022/12/bulk-update-ObservableCollection/</link>
      <guid>https://blog.yukx.io/2022/12/bulk-update-ObservableCollection/</guid>
      <pubDate>Mon, 12 Dec 2022 14:13:14 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;使用示例&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用示例&quot;&gt;#&lt;/a&gt; 使用示例&lt;/h2&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;figcaption data-lang=&quot;C#&quot;&gt;&lt;/figcaption&gt;&lt;table</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="使用示例"><a class="anchor" href="#使用示例">#</a> 使用示例</h2><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">using</span> <span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">BatchUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    collection<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token comment">// Some Addition</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    collection<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token comment">// Some Removal</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// And then only one time OnCollectionChanged trigged.</span></pre></td></tr></table></figure><h2 id="实现代码"><a class="anchor" href="#实现代码">#</a> 实现代码</h2><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BulkObservableCollection<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObservableCollection<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">bool</span></span> _suppressNotification <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollectionChanged</span><span class="token punctuation">(</span><span class="token class-name">NotifyCollectionChangedEventArgs</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_suppressNotification<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnCollectionChanged</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">IDisposable</span> <span class="token function">BatchUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        _suppressNotification <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UpdateToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">UpdateToken</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">private</span> <span class="token class-name">BulkObservableCollection<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> oc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">public</span> <span class="token function">UpdateToken</span><span class="token punctuation">(</span><span class="token class-name">BulkObservableCollection<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> cl<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            oc <span class="token operator">=</span> cl <span class="token operator">??</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            oc<span class="token punctuation">.</span>_suppressNotification <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            oc<span class="token punctuation">.</span><span class="token function">OnCollectionChanged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotifyCollectionChangedEventArgs</span><span class="token punctuation">(</span>NotifyCollectionChangedAction<span class="token punctuation">.</span>Reset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      
      <category domain="https://blog.yukx.io/tags/C/">C#</category>
      
      <category domain="https://blog.yukx.io/tags/ObservableCollection/">ObservableCollection</category>
      
      
      <comments>https://blog.yukx.io/2022/12/bulk-update-ObservableCollection/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>魔法上网碎碎念</title>
      <link>https://blog.yukx.io/2022/11/noise-about-magic-surfing/</link>
      <guid>https://blog.yukx.io/2022/11/noise-about-magic-surfing/</guid>
      <pubDate>Thu, 17 Nov 2022 20:17:16 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;note warning&quot;&gt;
&lt;p&gt;LONG may the empire.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;VMessTCPTLS 跑了好久了，最近终于在 IPv4 上挂了，虽然也不确定。&lt;br /&gt;
毕竟本地的运营商思路非常广，骚操作也非常多，DNS 发脾</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="note warning"><p>LONG may the empire.</p></div><p>VMessTCPTLS 跑了好久了，最近终于在 IPv4 上挂了，虽然也不确定。<br />毕竟本地的运营商思路非常广，骚操作也非常多，DNS 发脾气不解析外部域名是常有的事，固定宽带尚且如此，基站的玩法更是花样频出，给你分配一些申必地址<br /><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20221118123415.png" alt="?" title="***" /><br /> 真是让人受宠若惊。<br />由于最近的网络环境已经不再垂青于我，终于被迫趁着星光尚能亮起的时候迁移到了新家。</p><p>IPv4 的地址已经暴露，网页尚能浏览，而传统魔法结构已经不能维持了。</p><ul><li>CDN 大法好！</li><li>仅有 WebSocket 可以通过 CDN</li></ul><p>经过一些试错，如果构筑法术时保留了 TLS 的话，CDN 也要至少将等级提升到’Full’。<span class="spoiler blur" title="你知道得太多了">不会有人不用 Cloudflare 吧</span></p><p>网页可以访问的话，不如做戏做个全套，为流量设置一个 Fallback。</p><ul><li>Fallback 仅支持 TCP 方式</li></ul><p>Fallback 后面都是本机了，所以 TLS 的保障也可以到此为止了，不过需要注意的是另一点’alpn’。<br />HTTP/2 的流量 Fallback 下去也会是 HTTP/2，确保底层可以接住 h2 流量以免网页无法访问。或者干脆不要在前面添加 h2 的 alpn。</p><h2 id="注意"><a class="anchor" href="#注意">#</a> 注意</h2><p>本文主要还是发发牢骚，一通暴学终于感觉掌握了魔法的配置原理，记录一些不才落下的点，可能不适合作为参考。</p><h2 id="参考"><a class="anchor" href="#参考">#</a> 参考</h2><ol><li><p><a href="https://itlanyan.com/vless-fallback-object/#bnp_i_3">VLESS 协议的 fallback 参数介绍</a></p></li><li><p><a href="https://v2xtls.org/v2ray%E4%BD%BF%E7%94%A8cloudflare%E4%B8%AD%E8%BD%AC%E6%B5%81%E9%87%8F%EF%BC%8C%E6%8B%AF%E6%95%91%E8%A2%AB%E5%A2%99ip/">使用 cloudflare 中转流量，拯救被墙 ip</a></p></li></ol>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E7%94%9F%E5%91%BD%E5%9C%A8%E4%BA%8E%E6%8A%98%E8%85%BE/">生命在于折腾</category>
      
      
      <category domain="https://blog.yukx.io/tags/%E9%AD%94%E6%B3%95%E4%B8%8A%E7%BD%91/">魔法上网</category>
      
      <category domain="https://blog.yukx.io/tags/WS%E3%80%81TLS%E3%80%81CDN/">WS、TLS、CDN</category>
      
      
      <comments>https://blog.yukx.io/2022/11/noise-about-magic-surfing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>类型系统漫巡</title>
      <link>https://blog.yukx.io/2022/10/type-system-explorition/</link>
      <guid>https://blog.yukx.io/2022/10/type-system-explorition/</guid>
      <pubDate>Sat, 08 Oct 2022 21:15:24 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;note default no-icon&quot;&gt;
&lt;p&gt;气温骤降，天冷的似乎要把脑子都冻僵，不禁感叹当初为什么选了一个网面的椅子。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;类型类型&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#类型类型&quot;&gt;#&lt;/a&gt; 类型</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="note default no-icon"><p>气温骤降，天冷的似乎要把脑子都冻僵，不禁感叹当初为什么选了一个网面的椅子。</p></div><h2 id="类型类型"><a class="anchor" href="#类型类型">#</a> 类型，类型</h2><p>在动态语言中扑腾久了，作为一个短时记忆倾向的人类，就会不由得怀念起确定的类型给人带来的温暖的安心感，从这个角度来说，动态的类型，其强也好弱也好，都很难说是’有一个类型’—— 既不能在按下<span class="kbd">.</span> 时提供可用的成员，也不能在运行前确定这个’东西’到底会是什么样子。</p><p>在静态语言里扑腾久了，就有点烦，屁大点事也要重新声明一个类型。</p><p>普通的来说，也很难说现有类型系统的极限普遍迫切的需要突破，大部分的需求都可以被 <code>&lt;T, U, ...&gt;</code>  这样的类型参数解决，甚至说这些参数可以有提供的实参自动推导出来不需要再显式填写。<br />但是当你有了一些稀奇古怪的抽象，你想写最少的代码，你想把写过的东西随意组合一下形成新的东西，你就会发现这玩意既不直观也不方便，很快就直线撞上了边界 —— 当然你总有办法绕过去，但那就是另外的东西了。</p><h2 id="快给我变"><a class="anchor" href="#快给我变">#</a> 快给我变</h2><p>最近是有些想法，比如抽象出一个允许施加 / 撤销修改的数值类型，<br />通过依次计算修改来得出最终的值</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifiable</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name"><span class="token keyword">object</span></span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">Modifiers<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Modifiers<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifier</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>但在强类型语言里直接塞一个 object 进去显然不是什么好想法。<br />很容易想到的，给 Value 加一个类型</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifiable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">T</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">Modifier<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Modifiers<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifier<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token return-type class-name">T</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token class-name">T</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>但是还不太够的感觉，Modifier 显然是针对特定 Modifiable，即便是 value 的类型相同，也未必会想要 <code>ValueA: Modifiable&lt;int&gt;</code>  能够使用对 <code>ValueB: Modifiable&lt;int&gt;</code>  编写的 <code>Modifier&lt;int&gt;</code> 。</p><p>基于此，我理解了 <code>T: SomeInterface&lt;T&gt;</code>  的意义。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">ValueA</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Modifiable<span class="token punctuation">&lt;</span>ValueA<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">ValueA</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">Modifier<span class="token punctuation">&lt;</span>ValueA<span class="token punctuation">></span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Modifiers<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">AMod</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Modifier<span class="token punctuation">&lt;</span>ValueA<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>但是这样仍然排除不了之前的用法，所以在接口上添加如是约束</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifiable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Modifiable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">T</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">Modifier<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Modifiers<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifier<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Modifiable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token return-type class-name">T</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token class-name">T</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="note default"><p>后期修订：<br />现在回过头来想想这个 Value 其实就没有任何意义了，而要添加一个类型泛型又很麻烦地需要每次多标注一个类型，还是得靠基础设施。</p></div><p>若是有心继续深挖还可以进一步细化约束内部数据的类型</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifiable<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TData<span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">where</span> <span class="token class-name">TSelf</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Modifiable<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TData<span class="token punctuation">></span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">TData</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">Modifier<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TData<span class="token punctuation">></span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Mods<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifier<span class="token punctuation">&lt;</span>TModifiable<span class="token punctuation">,</span> TData<span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">where</span> <span class="token class-name">TModifiable</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Modifiable<span class="token punctuation">&lt;</span>TModifiable<span class="token punctuation">,</span>TData<span class="token punctuation">></span></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token return-type class-name">TData</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token class-name">TData</span> lastCalculated<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>理想情况下，对于 Modifier 的具体实现，应当从 TModifiable 中获取 TData，而现有工具已经覆盖不到这种需求了，况且在本例来讲，分出这个 TData 的意义不大。</p><h2 id="幻想时间"><a class="anchor" href="#幻想时间">#</a> 幻想时间</h2><p>比如这种混乱的写法</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Modifier<span class="token punctuation">&lt;</span>TModifiable<span class="token punctuation">&lt;</span>TModifiable<span class="token punctuation">,</span> TData<span class="token punctuation">></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>似乎是叫高阶类型来着，不过通常举出的例子通常关心 <code>&lt;T&lt;_&gt;&gt;</code>  高阶的类型本身，不过理应顺带可以提取出内层的类型。</p><p>也罢，我这半吊子函数式爱好者还是要学习一个。</p>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E4%BF%97%E4%B8%96%E4%BB%A5%E5%A4%96%E7%9A%84%E6%B6%88%E9%81%A3/">俗世以外的消遣</category>
      
      
      <category domain="https://blog.yukx.io/tags/%E8%A8%80%E5%B0%BD%E4%BA%8E%E8%A1%8C/">言尽于行</category>
      
      <category domain="https://blog.yukx.io/tags/%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/">类型系统</category>
      
      
      <comments>https://blog.yukx.io/2022/10/type-system-explorition/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MiniValine 使用 Cloudflare Workers 反代LeanCloud API</title>
      <link>https://blog.yukx.io/2022/07/reverse-proxy-on-cloudflare-workers-access-leancloud-api/</link>
      <guid>https://blog.yukx.io/2022/07/reverse-proxy-on-cloudflare-workers-access-leancloud-api/</guid>
      <pubDate>Wed, 27 Jul 2022 00:02:39 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;通过严谨的阅读公告，更深刻的理解了下内容，仅仅是不提供共享域名，你可以通过绑定自己的域名来继续使用服务。&lt;/p&gt;
&lt;p&gt;不过本文的努力也没有全部白费，使用 Workers 可以隐藏自己的 Key，防止被奇奇怪怪的使用，甚至可以</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="note info"><p>通过严谨的阅读公告，更深刻的理解了下内容，仅仅是不提供共享域名，你可以通过绑定自己的域名来继续使用服务。</p><p>不过本文的努力也没有全部白费，使用 Workers 可以隐藏自己的 Key，防止被奇奇怪怪的使用，甚至可以自己加点佐料，就这么安慰下自己吧。</p></div><p>首先，<a href="https://leancloudblog.com/2022-07-19-international-service-restrictions/">8 月 1 日起，国际版共享域名不再向中国大陆提供服务</a></p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220727160750.png" alt="官网公告" title="官网公告" /></p><p>虽然链接 404，但是公告可没有移除。</p><p>为了继续快乐白嫖，折腾了一整天，终于找到了<a href="https://github.com/MHuiG/MiniValine/tree/5/CF-LC">解决方案</a><span class="spoiler" title="你知道得太多了">并解决了解决方案里的问题成功上线</span></p><p>原本的代码写的一言难尽之余，跨域的访问一旦出错就是 CORS error，也真是天才般的设计。别人的问题在于给不支持跨域的 API 包装跨域，也许本方案不需要处理跨域也说不定…</p><p>需要格外注意的是修改访问人数是 <code>PUT</code>  请求，复制 request 的时候要对 body 特殊处理。</p><p>同时由于 Cloudflare Workers 自带域名 <code>*.workers.dev</code>  也是在我朝不可用的状态，需要配置自定义域名。Cloudflare Workers 的设置中已经提供了功能。<br />经尝试似乎要添加 <code>redirect: &quot;follow&quot;</code>  才能正常访问。</p><div class="note info"><p>自定义域名需要域名托管于 Cloudflare DNS 下，并且确认你的 SSL 设置不为 <code>Off</code>  以提供 HTTPS 访问，避免 <code>mixed content</code> 。</p></div><p>随后修改 <code>serverURLs</code>  为你的 Workers，按你的心情决定是否隐藏 AppKey。</p><p><span class="spoiler blur" title="你知道得太多了">各种错误轮番出现已经人晕了，每次改一点儿再撤销都回不到一个地方</span><br /><span class="spoiler blur" title="你知道得太多了">既然现在能用了我也懒得再改什么了，有人能提供优化的话也欢迎留言</span><br /><span class="spoiler blur" title="你知道得太多了">最开始还想在 MiniValine 基础上加个后端，结果 clone 下来一看</span><br /><span class="spoiler blur" title="你知道得太多了">代码像个麻花扭在一起，注入调用乱飞，告辞，我跟动态语言水火不容</span></p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td data-command=""></td><td><pre><span class="token comment">// src/index.js</span></pre></td></tr><tr><td data-num="2"></td><td data-command=""></td><td><pre><span class="token keyword">var</span> AppId <span class="token operator">=</span> <span class="token string">"--------------"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td data-command=""></td><td><pre><span class="token keyword">var</span> AppKey <span class="token operator">=</span> <span class="token string">"--------------"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td data-command=""></td><td><pre><span class="token keyword">var</span> <span class="token constant">ORIGINS</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td data-command=""></td><td><pre>  <span class="token string">"---------------"</span><span class="token operator">:</span> <span class="token string">"----------------"</span></pre></td></tr><tr><td data-num="6"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td data-command=""></td><td><pre><span class="token keyword">var</span> corsHeaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td data-command=""></td><td><pre>  <span class="token string">"Access-Control-Allow-Origin"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td data-command=""></td><td><pre>  <span class="token string">"Access-Control-Allow-Methods"</span><span class="token operator">:</span> <span class="token string">"GET,PUT,DELETE,HEAD,POST,OPTIONS"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td data-command=""></td><td><pre>  <span class="token string">"Access-Control-Max-Age"</span><span class="token operator">:</span> <span class="token string">"86400"</span></pre></td></tr><tr><td data-num="11"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td data-command=""></td><td><pre><span class="token keyword">var</span> src_default <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td data-command=""></td><td><pre>  <span class="token keyword">async</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td data-command="自定义域名"></td><td><pre>    <span class="token keyword">let</span> rq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> redirect<span class="token operator">:</span> <span class="token string">"follow"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td data-command=""></td><td><pre>    <span class="token keyword">return</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>rq<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td data-command=""></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td data-command=""></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td data-command=""></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td data-command=""></td><td><pre>    <span class="token keyword">return</span> <span class="token function">handleOptions</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td data-command=""></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td data-command=""></td><td><pre>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td data-command=""></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Origin'</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token constant">ORIGINS</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td data-command=""></td><td><pre>    <span class="token comment">// const target = ORIGINS[url.hostname];</span></pre></td></tr><tr><td data-num="25"></td><td data-command=""></td><td><pre>    url<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string">"---------------"</span><span class="token operator">:</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td data-command=""></td><td><pre>    <span class="token keyword">let</span> reqHEDNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td data-command=""></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reqHEDNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"X-LC-Id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td data-command=""></td><td><pre>      reqHEDNew<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"X-LC-Id"</span><span class="token punctuation">,</span> AppId<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td data-command=""></td><td><pre>      reqHEDNew<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"X-LC-Key"</span><span class="token punctuation">,</span> AppKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td data-command=""></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reqHEDNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"x-lc-sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td data-command=""></td><td><pre>      reqHEDNew<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"x-lc-sign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td data-command=""></td><td><pre>    <span class="token keyword">let</span> reqNew<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td data-command="PUT请求"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"PUT"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td data-command=""></td><td><pre>      reqNew <span class="token operator">=</span> <span class="token punctuation">&#123;</span> method<span class="token operator">:</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> headers<span class="token operator">:</span> reqHEDNew<span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td data-command=""></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="38"></td><td data-command=""></td><td><pre>      reqNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> headers<span class="token operator">:</span> reqHEDNew <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td data-command=""></td><td><pre>    <span class="token keyword">let</span> responsefetch <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reqNew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td data-command=""></td><td><pre>    <span class="token keyword">let</span> resHEDNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>responsefetch<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td data-command=""></td><td><pre>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>responsefetch<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> headers<span class="token operator">:</span> resHEDNew <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td data-command=""></td><td><pre>    response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td data-command=""></td><td><pre>    response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"GET, POST, PUT, DELETE, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td data-command=""></td><td><pre>    <span class="token keyword">return</span> response<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td data-command=""></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td data-command=""></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"nothing here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td data-command=""></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td data-command=""></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleOptions</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td data-command=""></td><td><pre>  <span class="token keyword">let</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td data-command=""></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Method"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Headers"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td data-command=""></td><td><pre>    <span class="token keyword">let</span> respHeaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td data-command=""></td><td><pre>      <span class="token operator">...</span>corsHeaders<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="54"></td><td data-command=""></td><td><pre>      <span class="token string">"Access-Control-Allow-Headers"</span><span class="token operator">:</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Headers"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td data-command=""></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td data-command=""></td><td><pre>      headers<span class="token operator">:</span> respHeaders</pre></td></tr><tr><td data-num="58"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td data-command=""></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td data-command=""></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td data-command=""></td><td><pre>      headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td data-command=""></td><td><pre>        Allow<span class="token operator">:</span> <span class="token string">"GET, HEAD, PUT,DELETE, POST, OPTIONS"</span></pre></td></tr><tr><td data-num="63"></td><td data-command=""></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td data-command=""></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td data-command=""></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td data-command=""></td><td><pre>  src_default <span class="token keyword">as</span> <span class="token keyword">default</span></pre></td></tr><tr><td data-num="69"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td data-command=""></td><td><pre><span class="token comment">//# sourceMappingURL=index.js.map</span></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E7%94%9F%E5%91%BD%E5%9C%A8%E4%BA%8E%E6%8A%98%E8%85%BE/">生命在于折腾</category>
      
      <category domain="https://blog.yukx.io/categories/%E7%94%9F%E5%91%BD%E5%9C%A8%E4%BA%8E%E6%8A%98%E8%85%BE/MyBlog/">MyBlog</category>
      
      
      <category domain="https://blog.yukx.io/tags/MiniValine/">MiniValine</category>
      
      <category domain="https://blog.yukx.io/tags/Cloudflare-Workers/">Cloudflare Workers</category>
      
      <category domain="https://blog.yukx.io/tags/LeanCloud%E5%9B%BD%E9%99%85%E7%89%88/">LeanCloud国际版</category>
      
      
      <comments>https://blog.yukx.io/2022/07/reverse-proxy-on-cloudflare-workers-access-leancloud-api/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>游戏开发日志（其𝒾）：ECS中的Buff系统实现思路</title>
      <link>https://blog.yukx.io/2022/07/game-dev-journal-i-ideas-of-a-buff-system-in-ECS/</link>
      <guid>https://blog.yukx.io/2022/07/game-dev-journal-i-ideas-of-a-buff-system-in-ECS/</guid>
      <pubDate>Sun, 24 Jul 2022 18:58:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;最近一直在磕 ECS，其将数据拆分为组件的想法深得我心，毕竟有些东西你总是要做了才知道合不合适，但是做完好不好改，可就不一定了。&lt;br /&gt;
学习了很多 ECS 的利弊，毕竟软件开发没有银弹，真实的世界处处充满了妥协。&lt;br /&gt;
而看到了有人说 Buff/Debuff 在</description>
        
      
      
      
      <content:encoded><![CDATA[<p>最近一直在磕 ECS，其将数据拆分为组件的想法深得我心，毕竟有些东西你总是要做了才知道合不合适，但是做完好不好改，可就不一定了。<br />学习了很多 ECS 的利弊，毕竟软件开发没有银弹，真实的世界处处充满了妥协。<br />而看到了有人说 Buff/Debuff 在 ECS 中很难高效实现，那今时不同往日，我自然是要试试，已经涌现了不少想法，必可活用于下一次。</p><h2 id="期望"><a class="anchor" href="#期望">#</a> 期望</h2><p>一个 Buff/Debuff，最为普遍的效果便是对数值的增减，对一个或数个数值，一个或数个 Buff 产生效果，作用到一个或数个目标。我们自然是希望这个系统可以比较好的描述这些行为。</p><h2 id="思路"><a class="anchor" href="#思路">#</a> 思路</h2><p>我们将一个 Buff 视为一个 Entity，Buff 的效果暂且仅关注各种数值的 <code>Modifier</code> ，因为很显然不作数值影响的各类 Buff 是必定要进行实现的，不能简单的复用。</p><p>这样一个 Buff 与被作用者的关系我们可以这样描述。</p><pre>Error: Failed to launch the browser process!/github/workspace/node_modules/puppeteer/.local-chromium/linux-818858/chrome-linux/chrome: error while loading shared libraries: libgobject-2.0.so.0: cannot open shared object file: No such file or directoryTROUBLESHOOTING: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md</pre><div class="note info"><p>此处仅表示逻辑上的关系。</p></div><p>通过实体上的 <code>Buff</code>  组件，我们可以以此来追踪 Buff 的作用时间，ECS 范式下普遍支持组件的移除检测，这样我们在 Buff 结束后仅将组件移除，而在 Buff 的实际实现中监测组件移除，就可以正确的移除 Buff 生效时添加的效果。</p><p><code>xxx Effect</code>  即为我们实现的 Buff 的标记在系统中查询区分。</p><p><code>xxx Modifiable</code>  是我们获取数值时查询的组件。而 <code>xxx Modification</code>  用于存储所有影响该组件的 Buff（ <code>Modifier</code> s， <code>Buff</code> ）。<br />则其实本系统与  <code>Modifiable</code> s 几乎是无关的，在对应 <code>Modification</code>  中 <code>Modifier</code>  与 <code>Buff</code>  实体对应存储，用于 Buff 效果的解除。只需要每次更新中按照<ruby>一定顺序<rp> (</rp><rt>大 坑</rt><rp>)</rp></ruby> 计算 <code>Modifier</code>  求值更新数值到 <code>Modifiable</code> 。</p><h3 id="关于计算顺序"><a class="anchor" href="#关于计算顺序">#</a> 关于计算顺序</h3><p>目前也有一点想法，可以使用优先队列，通过优先级排序确定计算顺序，但是需要注意的是，同优先级不能有两种不同的计算方法。</p><h2 id="bonus"><a class="anchor" href="#bonus">#</a> Bonus</h2><p>在此附上实验用到的代码，使用了 Bevy 实现，不过思路应该可以通用。</p><p>:::warn<br /> 声明：代码仅保证了没有<em>编译错误</em><sub> (笑)</sub>，未实际运行检验，也并不与上文所述思路完全一致。<span class="spoiler" title="你知道得太多了">这一切完全都是在实践中一点点发现不可行性后修补的结果的说…</span><br />:::</p><figure class="highlight rust"><figcaption data-lang="rust"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token attribute attr-name">#[derive(Component)]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Vision</span><span class="token punctuation">(</span><span class="token keyword">f32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token attribute attr-name">#[derive(Component)]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Buff</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    target<span class="token punctuation">:</span> <span class="token class-name">Entity</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    from<span class="token punctuation">:</span> <span class="token class-name">Entity</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    duration<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token attribute attr-name">#[derive(Component)]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">VisionModification</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    ord1<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ModifierEffect</span><span class="token operator">></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    ord2<span class="token punctuation">:</span> <span class="token namespace">collections<span class="token punctuation">::</span></span><span class="token class-name">BTreeSet</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">ModifierEffect</span><span class="token punctuation">,</span> <span class="token class-name">Entity</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token attribute attr-name">#[derive(Component)]</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">ModifierEffect</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token class-name">ByValue</span><span class="token punctuation">(</span><span class="token keyword">f32</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token class-name">ByPercentage</span><span class="token punctuation">(</span><span class="token keyword">f32</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token attribute attr-name">#[derive(Component)]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">VisionModifierEffect</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">fn</span> <span class="token function-definition function">buff_vision_modify_system</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">mut</span> commands<span class="token punctuation">:</span> <span class="token class-name">Commands</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">mut</span> vision_effects<span class="token punctuation">:</span> <span class="token class-name">Query</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">Buff</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">ModifierEffect</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">With</span><span class="token operator">&lt;</span><span class="token class-name">VisionModifierEffect</span><span class="token operator">>></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">mut</span> visions<span class="token punctuation">:</span> <span class="token class-name">Query</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">Entity</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">Vision</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">VisionModification</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">mut</span> visions_removed<span class="token punctuation">:</span> <span class="token class-name">RemovedComponents</span><span class="token operator">&lt;</span><span class="token class-name">Buff</span><span class="token operator">></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>buff<span class="token punctuation">,</span> vision_effect<span class="token punctuation">)</span> <span class="token keyword">in</span> vision_effects<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">let</span> vision <span class="token operator">=</span> visions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>buff<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">match</span> vision_effect <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token class-name">ModifierEffect</span><span class="token punctuation">::</span><span class="token class-name">ByValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                commands</pre></td></tr><tr><td data-num="34"></td><td><pre>                    <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>buff<span class="token punctuation">.</span>target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                    <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Vision</span><span class="token punctuation">(</span>vision<span class="token number">.1</span> <span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token class-name">ModifierEffect</span><span class="token punctuation">::</span><span class="token class-name">ByPercentage</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                commands</pre></td></tr><tr><td data-num="39"></td><td><pre>                    <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>buff<span class="token punctuation">.</span>target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Vision</span><span class="token punctuation">(</span>vision<span class="token number">.1</span> <span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">*</span> factor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">for</span> e <span class="token keyword">in</span> visions_removed<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> effect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> vision_effects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token keyword">let</span> vision <span class="token operator">=</span> visions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>buff<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">match</span> effect <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token class-name">ModifierEffect</span><span class="token punctuation">::</span><span class="token class-name">ByValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                    commands<span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Vision</span><span class="token punctuation">(</span>vision<span class="token number">.1</span> <span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">-</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                <span class="token class-name">ModifierEffect</span><span class="token punctuation">::</span><span class="token class-name">ByPercentage</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                    commands<span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Vision</span><span class="token punctuation">(</span>vision<span class="token number">.1</span> <span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">/</span> factor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>            commands<span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">despawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">fn</span> <span class="token function-definition function">buff_duration_system</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">mut</span> commands<span class="token punctuation">:</span> <span class="token class-name">Commands</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">mut</span> buffs<span class="token punctuation">:</span> <span class="token class-name">Query</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">Entity</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">Buff</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    time<span class="token punctuation">:</span> <span class="token class-name">Res</span><span class="token operator">&lt;</span><span class="token class-name">Time</span><span class="token operator">></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token keyword">for</span> mutable <span class="token keyword">in</span> buffs<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        mutable<span class="token number">.1</span><span class="token punctuation">.</span>duration <span class="token operator">-=</span> time<span class="token punctuation">.</span><span class="token function">delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">if</span> mutable<span class="token number">.1</span><span class="token punctuation">.</span>duration <span class="token operator">&lt;=</span> <span class="token number">0.0</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            commands<span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>mutable<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Buff</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="bonus-plus"><a class="anchor" href="#bonus-plus">#</a> Bonus Plus</h2><p>最初的构想其实是使用接口抽象，每个 Buff 都实现此接口，作为组件挂在被作用对象的实体上，在 System 中通过接口来获取所有 Buff 组件进行处理。<br />但这样做问题很多，</p><blockquote><p>Unity ECS 支持查询接口，代价是无法使用高性能的 Burst 编译器，最重要的是多个影响某个数值的 Buff 无法结算 —— 其他同类型的组件不可见；且想要用泛型接口来统一时就会发现组件内不允许出现非值类型，即使最后实现接口的均是 <code>struct</code> 。</p><p>而在 Rust 中类似的方法时使用 traits 作为类型参数，而 trait objects 无法在编译时时确定大小需要装箱，那就要给 <code>Box&lt;trait&gt;</code>  实现 <code>Component</code> ，也太怪了。</p></blockquote><p>最后一定要吐槽的是，Unity 的 ECS 文档目前写的真是屎一样，这样是最后尝试都在 Bevy 中做的原因。<br />虽然可能有还在 experimental 的缘故？看了一大堆不明所以的概念，最后试了一下确认了 System 创建后直接可以生效。也不得不说其实现也用着有点别扭（相对于 Bevy）。可能是我先入为主吗？或者说是基础设施对人潜意识的引导？总觉得现在 Unity 的 ECS<sup>0.51</sup> 有点不伦不类；写到这里我突然意识到没看到有创建 Entity 相关的内容，赶紧去找了下，嗯…<br />…<br /> 牌子、车、岔路.jpg</p>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E6%80%9D%E8%B7%AF/">思路</category>
      
      
      <category domain="https://blog.yukx.io/tags/ECS/">ECS</category>
      
      <category domain="https://blog.yukx.io/tags/Buff-Debuff-System/">Buff/Debuff System</category>
      
      <category domain="https://blog.yukx.io/tags/Modifiers/">Modifiers</category>
      
      
      <comments>https://blog.yukx.io/2022/07/game-dev-journal-i-ideas-of-a-buff-system-in-ECS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>游戏开发日志（其π）：Rust、Bevy &amp; ECS</title>
      <link>https://blog.yukx.io/2022/07/game-dev-journal-pi-Rust-Bevy-and-ECS/</link>
      <guid>https://blog.yukx.io/2022/07/game-dev-journal-pi-Rust-Bevy-and-ECS/</guid>
      <pubDate>Fri, 22 Jul 2022 06:18:09 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;本来嘛，想着重构要趁早，现在也阶段性完成一部分内容，试着把项目用 Rust 重写，刚好最近了解了 &lt;a href=&quot;https://bevyengine.org/&quot;&gt;Bevy&lt;/a&gt; 这个 Rust 写的使用 ECS 范式的游戏引擎，一举多得岂不美哉？&lt;/p&gt;
&lt;h2 id</description>
        
      
      
      
      <content:encoded><![CDATA[<p>本来嘛，想着重构要趁早，现在也阶段性完成一部分内容，试着把项目用 Rust 重写，刚好最近了解了 <a href="https://bevyengine.org/">Bevy</a> 这个 Rust 写的使用 ECS 范式的游戏引擎，一举多得岂不美哉？</p><h2 id="初见"><a class="anchor" href="#初见">#</a> 初见</h2><p>看看这目录结构，好不整齐<br /><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220722222441.png" alt="directory" title="真好啊" /></p><p>数据使用组件完全打散，在系统中通过查询来获取组件或实体，可以说是彻底解决了我不知道要怎么组织代码才算好的问题，功能也都完全隔离开，可以说是没有耦合的机会了。</p><p>最先实现的则是地图网格生成，感觉上既不算是过于复杂，又足够可以踩坑了。</p><h2 id="试探"><a class="anchor" href="#试探">#</a> 试探</h2><p>于是果不其然，当前版本的 Bevy <sup>0.7.0</sup> 并没有物理系统，于是递归查找物理引擎的插件。<br />倒还真有 <a href="https://rapier.rs/docs/">Rapier</a> 这个 Rust 写的物理引擎，他们给 Bevy 写了一个物理引擎插件提供了物理系统。<br />但我们的主角却并非其人，而也正是这个插件，使我的心态发生了一点变化。</p><p><a href="https://github.com/jcornaz/heron">Heron</a>，基于 Rapier 提供了一套 API，看上去也挺对味<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，使我选择了它。</p><p>由于没有诸如 <code>OverlapBox</code>  之类的助手函数，我只好按块在地图上生成<ruby>碰撞检测体<rp> (</rp><rt>Sensor</rt><rp>)</rp></ruby>，在下一帧中查询物体是否发生重叠。</p><figure class="highlight rust"><figcaption data-lang="rust"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>grid<span class="token punctuation">.</span>width <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>grid<span class="token punctuation">.</span>height <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        world</pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">insert_bundle</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">TransformBundle</span><span class="token operator">></span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token class-name">Transform</span><span class="token punctuation">::</span><span class="token function">from_translation</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                    grid<span class="token punctuation">.</span><span class="token function">get_world_coordinate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">with_scale</span><span class="token punctuation">(</span><span class="token class-name">MapGrid</span><span class="token punctuation">::</span><span class="token function">vec_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">RigidBody</span><span class="token punctuation">::</span><span class="token class-name">Sensor</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">CollisionShape</span><span class="token punctuation">::</span><span class="token class-name">Cuboid</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                half_extends<span class="token punctuation">:</span> <span class="token class-name">MapGrid</span><span class="token punctuation">::</span><span class="token function">vec_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                border_radius<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Collisions</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Tile</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                grid<span class="token punctuation">:</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>world<span class="token punctuation">.</span><span class="token function">insert_resource</span><span class="token punctuation">(</span><span class="token class-name">Tiled</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><div class="note info"><p>这里展示了创建实体的方法，在最后生成完砖块后在世界里添加 <code>Tiled</code>  资源，以在下一次调用时作为判断依据。</p></div><p>查询 Tile (存储着砖块的索引)，和 Collision（存储着碰撞的信息），生成网格数据，<br />把 Entity 存起来后面清理用。<br />这样网格数据作为游戏内有唯一性的数据就作为 Resource 存储好了，随后切换<ruby>状态<rp> (</rp><rt>State</rt><rp>)</rp></ruby> 表示游戏可以开始了<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><figure class="highlight rust"><figcaption data-lang="rust"></figcaption><table><tr><td data-num="1"></td><td data-command=""></td><td><pre><span class="token keyword">let</span> <span class="token keyword">mut</span> map_grid <span class="token operator">=</span> <span class="token class-name">MapGrid</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td data-command=""></td><td><pre>    width<span class="token punctuation">:</span> map<span class="token punctuation">.</span>size<span class="token punctuation">.</span>x <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td data-command=""></td><td><pre>    height<span class="token punctuation">:</span> map<span class="token punctuation">.</span>size<span class="token punctuation">.</span>y <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td data-command=""></td><td><pre>    status<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">MapStatus</span><span class="token punctuation">::</span><span class="token class-name">Empty</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">.</span>x <span class="token operator">*</span> map<span class="token punctuation">.</span>size<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td data-command=""></td><td><pre><span class="token comment">// map is tiled, check tiles</span></pre></td></tr><tr><td data-num="7"></td><td data-command=""></td><td><pre><span class="token keyword">let</span> <span class="token keyword">mut</span> query <span class="token operator">=</span> world<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">Entity</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">Tile</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">Collisions</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td data-command="我与编译器搏斗的证明"></td><td><pre><span class="token keyword">let</span> <span class="token keyword">mut</span> tile_entities <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td data-command="我与编译器搏斗的证明"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>    <span class="token keyword">let</span> <span class="token keyword">mut</span> tiles <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>world<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Tile</span> <span class="token punctuation">&#123;</span> grid<span class="token punctuation">:</span> pos <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> collision<span class="token punctuation">)</span> <span class="token keyword">in</span> tiles<span class="token punctuation">.</span><span class="token function">by_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>        map_grid<span class="token punctuation">[</span><span class="token punctuation">[</span>pos<span class="token punctuation">.</span>x <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> pos<span class="token punctuation">.</span>y <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">if</span> collision<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>            <span class="token class-name">MapStatus</span><span class="token punctuation">::</span><span class="token class-name">Empty</span></pre></td></tr><tr><td data-num="14"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>            <span class="token class-name">MapStatus</span><span class="token punctuation">::</span><span class="token class-name">Obstacle</span></pre></td></tr><tr><td data-num="16"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>        tile_entities<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td data-command="我与编译器搏斗的证明"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td data-command="我与编译器搏斗的证明"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td data-command="我与编译器搏斗的证明"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td data-command=""></td><td><pre><span class="token keyword">for</span> t <span class="token keyword">in</span> tile_entities <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td data-command=""></td><td><pre>    world<span class="token punctuation">.</span><span class="token function">despawn</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td data-command=""></td><td><pre>world<span class="token punctuation">.</span><span class="token function">remove_resource</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Tiled</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td data-command=""></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td data-command=""></td><td><pre>world<span class="token punctuation">.</span><span class="token function">insert_resource</span><span class="token punctuation">(</span>map_grid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td data-command=""></td><td><pre>world</pre></td></tr><tr><td data-num="28"></td><td data-command=""></td><td><pre>    <span class="token punctuation">.</span><span class="token function">get_resource_mut</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">State</span><span class="token operator">&lt;</span><span class="token class-name">GameState</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td data-command=""></td><td><pre>    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td data-command=""></td><td><pre>    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">GameState</span><span class="token punctuation">::</span><span class="token class-name">Game</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td data-command=""></td><td><pre>    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><div class="note info"><p>中间突兀的大括号方法块是为了让其中的 world 不可变引用早日如土为安，不要妨碍后面的可变引用调用。<br />这里展示了查询组件和实体，进行操作的方法</p></div><h2 id="递进"><a class="anchor" href="#递进">#</a> 递进</h2><p>这里可以透露一下地图文件的设计，使用 json 存储，地图上的对象设计成内置、外置素材，方便进一步自定义。</p><p>这里值得一提的是 Rust 可以将  <code>Result&lt;T, E&gt;</code>  的迭代器（不做处理的最终结果将是 <code>Vec&lt;Result&lt;T, E&gt;&gt;</code> ）收集为 <code>Result&lt;Vec&lt;T&gt;, E&gt;</code> ，这样极大方便了对数组映射时的错误处理，真是百闻不如一见，令人耳目一新。<br />这样我就可以放心的返回一个 <code>Err</code> ，而它最终也会冒泡到闭包外部成为返回值。</p><figure class="highlight rust"><figcaption data-lang="rust"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// pub fn load_map(path: &amp;str) -> Result&lt;Map, Box&lt;dyn Error>></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> objects <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string">"objects"</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>obj<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">match</span> obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token namespace">map_object_meta<span class="token punctuation">::</span></span><span class="token class-name">SpawnPoint</span><span class="token punctuation">::</span><span class="token constant">TYPENAME</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">let</span> position<span class="token punctuation">:</span> <span class="token class-name">Vec2</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"position"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"map parsing err"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"position"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"map parsing err"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">let</span> player <span class="token operator">=</span> obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"player"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_i32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"map parsing err"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">MapObject</span><span class="token punctuation">::</span><span class="token class-name">SpawnPoint</span><span class="token punctuation">(</span><span class="token namespace">map_object_meta<span class="token punctuation">::</span></span><span class="token class-name">SpawnPoint</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                position<span class="token punctuation">,</span> player<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token namespace">map_object_meta<span class="token punctuation">::</span></span><span class="token class-name">Struct</span><span class="token punctuation">::</span><span class="token constant">TYPENAME</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">let</span> position<span class="token punctuation">:</span> <span class="token class-name">Vec2</span> <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"position"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"map parsing err"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"position"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"map parsing err"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">let</span> player <span class="token operator">=</span> obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"player"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_i32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"map parsing err"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">let</span> group <span class="token operator">=</span> obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"group"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_i32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"map parsing err"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">let</span> source <span class="token operator">=</span> obj<span class="token number">.1</span><span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"map parsing err"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">MapObject</span><span class="token punctuation">::</span><span class="token class-name">Struct</span><span class="token punctuation">(</span><span class="token namespace">map_object_meta<span class="token punctuation">::</span></span><span class="token class-name">Struct</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                position<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                player<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                group<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                source<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        _ <span class="token operator">=></span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"unknown map object type"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// Iter&lt;Result&lt;MapObject, &amp;str>></span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span><span class="token punctuation">,</span> _<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>到这为止都还显得十分宁静祥和。</p><h2 id="终章"><a class="anchor" href="#终章">#</a> 𝆑𝆑𝆑 终章</h2><p>那么很自然的，我要生成地图了，我要生成地图边界了，我发现没有这样一个碰撞体。</p><p>Heron 声明提供底层 Rapier 的功能，我找到这样的碰撞体了，我找到所在的模块了，我发现这个 <code>struct</code>  没有 <code>#[derive(Component)]</code> 。</p><p>ℱ𝒾𝓃.</p><hr /><p>不过此处折腾也不能说是一无所获，本文也没有任何抱怨的意思，Rust、Bevy 可以说未来可期了。不过一无所有的我还是要以完成项目为优先事项，暂别。</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>相比 Rapier，使用内置的 Vector 类型，API 也更加简单 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>其实不应该写在这里，而应该单独写一个系统用于检查资源是否准备完成切换状态，不过现在姑且还算简单就先这么写了。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/conquest-of-star/">conquest of star</category>
      
      
      <category domain="https://blog.yukx.io/tags/ECS/">ECS</category>
      
      <category domain="https://blog.yukx.io/tags/Rust/">Rust</category>
      
      <category domain="https://blog.yukx.io/tags/Bevy/">Bevy</category>
      
      
      <comments>https://blog.yukx.io/2022/07/game-dev-journal-pi-Rust-Bevy-and-ECS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>游戏开发日志（其四·一）：迷雾大小与物体实际大小不一致的原因</title>
      <link>https://blog.yukx.io/2022/07/game-dev-journal-4-1-mismatching-fog-size-with-obstacle-size/</link>
      <guid>https://blog.yukx.io/2022/07/game-dev-journal-4-1-mismatching-fog-size-with-obstacle-size/</guid>
      <pubDate>Mon, 18 Jul 2022 05:28:50 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;在上一篇的最后，可以看到小尺寸的障碍物有着与之不匹配的巨大遮挡面积。&lt;/p&gt;
&lt;p&gt;—— 这里不得不补充下：尚未书面记录的，本项目使用了 &amp;quot;地图&amp;quot; 这一概念，目前的运行场景中包含编辑器中添加的物体和读取地图文件后运行时添加的物体。在地图生成完成后调用初始</description>
        
      
      
      
      <content:encoded><![CDATA[<p>在上一篇的最后，可以看到小尺寸的障碍物有着与之不匹配的巨大遮挡面积。</p><p>—— 这里不得不补充下：尚未书面记录的，本项目使用了 &quot;地图&quot; 这一概念，目前的运行场景中包含编辑器中添加的物体和读取地图文件后运行时添加的物体。在地图生成完成后调用初始化网格。</p><p>所以合理怀疑到了地图生成阶段。</p><p><a href="#%E7%AD%94%E6%A1%88%E5%91%BC%E4%B9%8B%E6%AC%B2%E5%87%BA">太长不看</a></p><h3 id="gizmos"><a class="anchor" href="#gizmos">#</a> Gizmos</h3><p>为了 Debug，学习了下原项目中绘制地图网格的操作，在 Hierarchy 中选中对象，可以将生成的网格显示到屏幕上。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDrawGizmosSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  </pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>mapGrid <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        Gizmos<span class="token punctuation">.</span>color <span class="token operator">=</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        Gizmos<span class="token punctuation">.</span><span class="token function">DrawWireCube</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> mapGrid<span class="token punctuation">.</span>GridSize<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> mapGrid<span class="token punctuation">.</span>Height<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                Gizmos<span class="token punctuation">.</span>color <span class="token operator">=</span> mapGrid<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>MapGrid<span class="token punctuation">.</span>MapStatus<span class="token punctuation">.</span>Obstacle<span class="token punctuation">)</span> <span class="token punctuation">?</span> Color<span class="token punctuation">.</span>red <span class="token punctuation">:</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                Gizmos<span class="token punctuation">.</span><span class="token function">DrawWireCube</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span><span class="token function">GetRealPosition</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span>GridSize<span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>GridSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>地图可视化后，发现右侧小障碍物在网格中的大小似乎与左下侧大障碍物（编辑器中的 Prefab 原型）相近，而该小障碍物是在运行后创建的对象，其大小是从地图文件中读取缩放值后设定的。</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">"scale"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Vector3</span> scale <span class="token operator">=</span> st<span class="token punctuation">.</span>scale<span class="token punctuation">;</span> scale<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>st_in<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>localScale <span class="token operator">=</span> scale<span class="token punctuation">;</span></pre></td></tr></table></figure><p>而尝试将其变得更大后，发现遮挡面积并未改变，</p><h3 id="答案呼之欲出"><a class="anchor" href="#答案呼之欲出">#</a> 答案呼之欲出</h3><p>—— localScale 并非立即生效，所以生成阶段设置 scale，生效延后到了生成阶段完成网格初始化之后，可能是在下一帧中生效？</p><p>使用 <code>Invoke</code>  延迟网格初始化后问题也成功解决。</p><div class="note default"><p>这个异常的迷雾没有碰撞体积，走在里面会丢失周围一切的视野，只能看到周围一圈，外面自然也无法看到里面<br />其实还挺酷的，「黑域」，后续可以专门搞一个。</p></div><h3 id="另外的小收获"><a class="anchor" href="#另外的小收获">#</a> 另外的小收获</h3><p>在上一篇的缓动函数 <code>Lerp</code>  中<br />将</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre>Graphics<span class="token punctuation">.</span><span class="token function">Blit</span><span class="token punctuation">(</span>nextTexture<span class="token punctuation">,</span> currnetTexture<span class="token punctuation">,</span> blurMaterial<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>中的 <code>pass</code>  传入参数  <code>1</code>  改为  <code>0</code> ，可以避免迷雾的透明度的提升导致可以透过未探索迷雾看到地形。</p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220718220522.png" alt="新效果" /></p>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/conquest-of-star/">conquest of star</category>
      
      
      <category domain="https://blog.yukx.io/tags/Unity/">Unity</category>
      
      <category domain="https://blog.yukx.io/tags/%E6%88%98%E4%BA%89%E8%BF%B7%E9%9B%BE/">战争迷雾</category>
      
      <category domain="https://blog.yukx.io/tags/localScale/">localScale</category>
      
      
      <comments>https://blog.yukx.io/2022/07/game-dev-journal-4-1-mismatching-fog-size-with-obstacle-size/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>游戏开发日志(其四)：战争迷雾</title>
      <link>https://blog.yukx.io/2022/07/game-dev-journal-4-fog-of-war/</link>
      <guid>https://blog.yukx.io/2022/07/game-dev-journal-4-fog-of-war/</guid>
      <pubDate>Sun, 17 Jul 2022 17:15:11 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本文基于&lt;a href=&quot;https://www.bilibili.com/video/BV1tt411j7Zr?share_source=copy_web&quot;&gt;【基于视野的战争迷雾实现】Unity 战争迷雾实现&lt;/a&gt; &lt;a </description>
        
      
      
      
      <content:encoded><![CDATA[<div class="note info"><p>本文基于<a href="https://www.bilibili.com/video/BV1tt411j7Zr?share_source=copy_web">【基于视野的战争迷雾实现】Unity 战争迷雾实现</a> <a href="https://space.bilibili.com/3981300">@琴桌</a> 实现。<br /><a href="https://github.com/QinZhuo/FogOfWar_ForUnity">Github</a></p></div><div class="note default"><p>一个月的磕磕绊绊终于是完成了效果，总感觉既然当初察觉了掌握 ECS 的契机不如直接上手，现在纠结这些对象、类功能的划分实属难受。<br />旁人的打断，自己的摆烂，想到这里，不禁潸然。</p></div><h2 id="概述"><a class="anchor" href="#概述">#</a> 概述</h2><p>总体上的思路为将地图按方块划分，将地图上的障碍物标记出来，对每个有视野的单位进行射线检测判断视野是否被遮挡，将方块化的视野转换为 RenderTexture 作为迷雾对象的材质渲染到地图的上方。</p><h2 id="地图块"><a class="anchor" href="#地图块">#</a> 地图块</h2><h3 id="地图块定义"><a class="anchor" href="#地图块定义">#</a> 地图块定义</h3><p>使用一个枚举代表一个地图块的状态</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MapStatus</span><span class="token punctuation">:</span><span class="token type-list"><span class="token keyword">byte</span></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    Empty<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    Obstacle<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    AllyUnit<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    EnemeyUnit<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    SelfUnit</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 整个地图的地图块</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token class-name">MapStatus<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> innerMap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 地图宽高</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Width <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token operator">=></span> innerMap<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Height <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token operator">=></span> innerMap<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 地图块的边长</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> GridSize <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="地图块索引"><a class="anchor" href="#地图块索引">#</a> 地图块索引</h3><p>对地图的索引到真实位置的转换则有</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name">Vector2</span> <span class="token function">GetRealPosition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token punctuation">(</span>x <span class="token operator">-</span> Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.5f</span><span class="token punctuation">)</span> <span class="token operator">*</span> GridSize<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token punctuation">(</span>y <span class="token operator">-</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.5f</span><span class="token punctuation">)</span> <span class="token operator">*</span> GridSize</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name">Vector2Int</span> <span class="token function">GetGridPosition</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> position<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2Int</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>x <span class="token operator">/</span> GridSize <span class="token operator">+</span> Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>y <span class="token operator">/</span> GridSize <span class="token operator">+</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsInMap</span><span class="token punctuation">(</span><span class="token class-name">Vector2Int</span> pos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span>pos<span class="token punctuation">.</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pos<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> Width<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pos<span class="token punctuation">.</span>y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pos<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> Height<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="地图块生成"><a class="anchor" href="#地图块生成">#</a> 地图块生成</h3><p>对于地图，可以使用  <code>Physics2D.OverlapBox()</code> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 来判断地图块状态，使用了 <code>Solid Unit</code>  作为障碍物的 Layer，排除其他单位碰撞体。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Height<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token class-name"><span class="token keyword">var</span></span> box <span class="token operator">=</span> Physics2D<span class="token punctuation">.</span><span class="token function">OverlapBox</span><span class="token punctuation">(</span><span class="token function">GetRealPosition</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span>GridSize<span class="token punctuation">,</span> GridSize<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> LayerMask<span class="token punctuation">.</span><span class="token function">GetMask</span><span class="token punctuation">(</span><span class="token string">"Solid Unit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>box <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            innerMap<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> MapStatus<span class="token punctuation">.</span>Obstacle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">else</span> innerMap<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> MapStatus<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="单位视野"><a class="anchor" href="#单位视野">#</a> 单位视野</h2><p>使用一个 Behavior 存储单位视野相关的数据</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnitVision</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token comment">// 这个 Attribute 可以让变量显示在 Inspector 窗口中</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name"><span class="token keyword">float</span></span> sightRange <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">GetSight</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> sightRange<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="迷雾生成"><a class="anchor" href="#迷雾生成">#</a> 迷雾生成</h2><p>首先归纳下现有代码，将<a href="#%E5%9C%B0%E5%9B%BE%E5%9D%97">地图块</a>内代码均包装为 <code>MapGrid</code>  类</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapGrid</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="基本设施"><a class="anchor" href="#基本设施">#</a> 基本设施</h3><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FogMaker</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 地图网格</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">MapGrid</span> mapGrid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 观察者</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">List<span class="token punctuation">&lt;</span>UnitVision<span class="token punctuation">></span></span> viewers <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 迷雾颜色信息</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">Color32<span class="token punctuation">[</span><span class="token punctuation">]</span></span> colorBuffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 网格索引转换为颜色索引</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ColorIndex</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">*</span> mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name">MapGrid</span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">// 初始化迷雾为不透明黑色</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        colorBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Color32</span><span class="token punctuation">[</span>mapGrid<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        Array<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>colorBuffer<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Color32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// ... </span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="迷雾的计算"><a class="anchor" href="#迷雾的计算">#</a> 迷雾的计算</h3><p>对每个观察者，获取视野范围内的方块</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> v <span class="token keyword">in</span> viewers<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name"><span class="token keyword">var</span></span> pos <span class="token operator">=</span> mapGrid<span class="token punctuation">.</span><span class="token function">GetGridPosition</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name"><span class="token keyword">var</span></span> sight_radius <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">GetSight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> mapGrid<span class="token punctuation">.</span>GridSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name"><span class="token keyword">var</span></span> sight_square <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sight_radius <span class="token operator">*</span> sight_radius<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">List<span class="token punctuation">&lt;</span>Vector2Int<span class="token punctuation">></span></span> curVisionPos <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sight_radius<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sight_radius<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sight_radius<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sight_radius<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">+</span> j <span class="token operator">*</span> j <span class="token operator">&lt;=</span> sight_square<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token comment">// 该坐标处于可视范围内 且处于地图内</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2Int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span><span class="token function">IsInMap</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    curVisionPos<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    </pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>对获取到的方块，将其与观察者连线，判断中间是否有障碍物遮挡，若有则从视野中移除。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 由远到近排序</span></pre></td></tr><tr><td data-num="2"></td><td><pre>curVisionPos<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">DistanceSquared</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">DistanceSquared</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">HashSet<span class="token punctuation">&lt;</span>Vector2Int<span class="token punctuation">></span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> novision <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> p <span class="token keyword">in</span> curVisionPos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">var</span> <span class="token punctuation">(</span>blocked<span class="token punctuation">,</span> unblocked<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">GetBlockedAndUnblocked</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        novision<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>blocked<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        visited<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>blocked<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        visited<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>unblocked<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 移除无视野</span></pre></td></tr><tr><td data-num="17"></td><td><pre>curVisionPos<span class="token punctuation">.</span><span class="token function">RemoveAll</span><span class="token punctuation">(</span>p <span class="token operator">=></span> novision<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 将视野区域设置为透明</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> p <span class="token keyword">in</span> curVisionPos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    colorBuffer<span class="token punctuation">[</span><span class="token function">ColorIndex</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里首先按照由远到近的距离将方块排序，提高后续计算效率，因为在计算遮挡时会将所有被遮挡和不被遮挡的方块返回，可以尽可能多的排除 visited 方块。</p><h4 id="射线检测函数"><a class="anchor" href="#射线检测函数">#</a> 射线检测函数</h4><p>由起点向终点逐方块检测是否有障碍物，若遇到障碍物则后续方块均为无视野的遮挡区域。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token punctuation">(</span>List<span class="token punctuation">&lt;</span>Vector2Int<span class="token punctuation">></span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span>Vector2Int<span class="token punctuation">></span><span class="token punctuation">)</span></span> <span class="token function">GetBlockedAndUnblocked</span><span class="token punctuation">(</span><span class="token class-name">Vector2Int</span> source<span class="token punctuation">,</span> <span class="token class-name">Vector2Int</span> target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name"><span class="token keyword">var</span></span> blocked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Vector2Int<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name"><span class="token keyword">var</span></span> unblocked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Vector2Int<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name"><span class="token keyword">var</span></span> delta <span class="token operator">=</span> target <span class="token operator">-</span> source<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 起始位置相同</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>delta<span class="token punctuation">.</span>sqrMagnitude <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mapGrid<span class="token punctuation">[</span>source<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>MapGrid<span class="token punctuation">.</span>MapStatus<span class="token punctuation">.</span>Obstacle<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            blocked<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">else</span> unblocked<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>blocked<span class="token punctuation">,</span> unblocked<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    unblocked<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token class-name"><span class="token keyword">bool</span></span> blockMet <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 判断 X 或 Y 作为基础步长方向</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>delta<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>delta<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token comment">// X 轴为方向</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// 符号</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token class-name"><span class="token keyword">int</span></span> x_sign <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>delta<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">// 增量</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token class-name"><span class="token keyword">var</span></span> y_inc <span class="token operator">=</span> <span class="token punctuation">(</span>delta<span class="token punctuation">.</span>y <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>delta<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token class-name"><span class="token keyword">float</span></span> step_y <span class="token operator">=</span> y_inc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> step_x <span class="token operator">=</span> x_sign<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            x_sign <span class="token operator">*</span> step_x <span class="token operator">&lt;=</span> x_sign <span class="token operator">*</span> delta<span class="token punctuation">.</span>x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            step_x<span class="token operator">+=</span>x_sign<span class="token punctuation">,</span> step_y<span class="token operator">+=</span>y_inc<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token class-name"><span class="token keyword">var</span></span> s <span class="token operator">=</span> source <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2Int</span><span class="token punctuation">(</span>step_x<span class="token punctuation">,</span> Mathf<span class="token punctuation">.</span><span class="token function">RoundToInt</span><span class="token punctuation">(</span>step_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>blockMet<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                unblocked<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                blockMet <span class="token operator">=</span> mapGrid<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>MapGrid<span class="token punctuation">.</span>MapStatus<span class="token punctuation">.</span>Obstacle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                blocked<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 方向为 Y 轴的情况与 X 轴基本相同，只需调换 x、y 的角色即可</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span>blocked<span class="token punctuation">,</span> unblocked<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="迷雾刷新"><a class="anchor" href="#迷雾刷新">#</a> 迷雾刷新</h3><p>在区域丢失视野时重新覆盖一层半透明的已探索迷雾</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RefreshFog</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colorBuffer<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colorBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            colorBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>配合使用可以实现战争迷雾 -(未) 探索区域的效果。</p><h3 id="迷雾贴图"><a class="anchor" href="#迷雾贴图">#</a> 迷雾贴图</h3><div class="note info"><p>Shader、材质、纹理，属实头大住了，并没有完全理解此部分的流程，不过姑且实现了效果</p></div><p>初始化资源</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Material</span> blurMaterial<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Texture2D</span> textureBuffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">RenderTexture</span> renderTexture<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">RenderTexture</span> renderTexture2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">RenderTexture</span> nextTexture<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">RenderTexture</span> currnetTexture<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name">MapGrid</span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// ... </span></pre></td></tr><tr><td data-num="10"></td><td><pre>    blurMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Material</span><span class="token punctuation">(</span>Shader<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"ImageEffect/AverageBlur"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    textureBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Texture2D</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> TextureFormat<span class="token punctuation">.</span>ARGB32<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    renderTexture <span class="token operator">=</span> RenderTexture<span class="token punctuation">.</span><span class="token function">GetTemporary</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    renderTexture2 <span class="token operator">=</span> RenderTexture<span class="token punctuation">.</span><span class="token function">GetTemporary</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    nextTexture <span class="token operator">=</span> RenderTexture<span class="token punctuation">.</span><span class="token function">GetTemporary</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    currnetTexture <span class="token operator">=</span> RenderTexture<span class="token punctuation">.</span><span class="token function">GetTemporary</span><span class="token punctuation">(</span>mapGrid<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> mapGrid<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 在销毁时释放资源</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    RenderTexture<span class="token punctuation">.</span><span class="token function">ReleaseTemporary</span><span class="token punctuation">(</span>renderTexture<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    RenderTexture<span class="token punctuation">.</span><span class="token function">ReleaseTemporary</span><span class="token punctuation">(</span>renderTexture2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    RenderTexture<span class="token punctuation">.</span><span class="token function">ReleaseTemporary</span><span class="token punctuation">(</span>currnetTexture<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    RenderTexture<span class="token punctuation">.</span><span class="token function">ReleaseTemporary</span><span class="token punctuation">(</span>nextTexture<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>使用颜色信息生成 Texture，并进行几次模糊</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MakeTextureAndBlur</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    textureBuffer<span class="token punctuation">.</span><span class="token function">SetPixels32</span><span class="token punctuation">(</span>colorBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    textureBuffer<span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    Graphics<span class="token punctuation">.</span><span class="token function">Blit</span><span class="token punctuation">(</span>textureBuffer<span class="token punctuation">,</span> renderTexture<span class="token punctuation">,</span> blurMaterial<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    </pre></td></tr><tr><td data-num="8"></td><td><pre>    Graphics<span class="token punctuation">.</span><span class="token function">Blit</span><span class="token punctuation">(</span>renderTexture<span class="token punctuation">,</span> renderTexture2<span class="token punctuation">,</span> blurMaterial<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    Graphics<span class="token punctuation">.</span><span class="token function">Blit</span><span class="token punctuation">(</span>renderTexture2<span class="token punctuation">,</span> renderTexture<span class="token punctuation">,</span> blurMaterial<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    Graphics<span class="token punctuation">.</span><span class="token function">Blit</span><span class="token punctuation">(</span>renderTexture<span class="token punctuation">,</span> nextTexture<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>缓动，在两帧迷雾间过渡</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Lerp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Graphics<span class="token punctuation">.</span><span class="token function">Blit</span><span class="token punctuation">(</span>currnetTexture<span class="token punctuation">,</span> renderTexture<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    blurMaterial<span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token string">"_LastTex"</span><span class="token punctuation">,</span> renderTexture<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Graphics<span class="token punctuation">.</span><span class="token function">Blit</span><span class="token punctuation">(</span>nextTexture<span class="token punctuation">,</span> currnetTexture<span class="token punctuation">,</span> blurMaterial<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在每次更新时更新迷雾</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">RefreshFog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">ComputeFog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">MakeTextureAndBlur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">Lerp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>对外提供 Texture 获取</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name">RenderTexture</span> FogTexture <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token operator">=></span> currnetTexture<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="迷雾渲染"><a class="anchor" href="#迷雾渲染">#</a> 迷雾渲染</h2><p>获取渲染迷雾的对象的材质，每次更新时将生成的 FogTexture 赋予到材质即可。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td data-command=""></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FogRenderer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span></pre></td></tr><tr><td data-num="2"></td><td data-command=""></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td data-command=""></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> fogRenderer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td data-command=""></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">FogMaker</span> fogMaker<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td data-command=""></td><td><pre>    </pre></td></tr><tr><td data-num="6"></td><td data-command=""></td><td><pre>    <span class="token class-name">Material</span> fogMaterial<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td data-command=""></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td data-command=""></td><td><pre>        fogMaterial <span class="token operator">=</span> fogRenderer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Renderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td data-command=""></td><td><pre>    <span class="token comment">// Update is called once per frame</span></pre></td></tr><tr><td data-num="12"></td><td data-command=""></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td data-command=""></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fogMaker<span class="token punctuation">.</span>FogTexture <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td data-command=""></td><td><pre>            fogMaterial<span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token string">"_MainTex"</span><span class="token punctuation">,</span> fogMaker<span class="token punctuation">.</span>FogTexture<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>为 fogRenderer 添加如下组件</p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220718140108.png" alt="示例" /></p><div class="note info"><p>在 2D 项目中使用 Plane 需要进行旋转，确保方向符合你的要求。</p><p>MeshRenderer 的材质是使用 Shader 创建的，见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1FpblpodW8vRm9nT2ZXYXJfRm9yVW5pdHkvdHJlZS9tYXN0ZXIvQXNzZXRzL0ZvZ09mV2FyL1NoYWRlcnM=" title="Shaders">此</span></p></div><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220718140207.png" alt="效果展示" /></p><div class="note default"><p>意外的实现了一个草丛呢… 真是世事难料。<br />在本章节中的 MapGrid 可以基于此上进一步来实现寻路系统，敬请期待。</p></div><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>对于 3D 项目，使用 <code>Physics.CheckBox()</code> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/conquest-of-star/">conquest of star</category>
      
      
      <category domain="https://blog.yukx.io/tags/Unity/">Unity</category>
      
      <category domain="https://blog.yukx.io/tags/%E6%88%98%E4%BA%89%E8%BF%B7%E9%9B%BE/">战争迷雾</category>
      
      <category domain="https://blog.yukx.io/tags/%E5%9C%B0%E5%9B%BE%E7%BD%91%E6%A0%BC/">地图网格</category>
      
      
      <comments>https://blog.yukx.io/2022/07/game-dev-journal-4-fog-of-war/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>游戏开发日志(其三)：单位移动</title>
      <link>https://blog.yukx.io/2022/06/game-dev-journal-3-unit-move/</link>
      <guid>https://blog.yukx.io/2022/06/game-dev-journal-3-unit-move/</guid>
      <pubDate>Wed, 15 Jun 2022 18:20:49 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;span class=&quot;spoiler blur&quot; title=&quot;你知道得太多了&quot;&gt;我还真时跟对象没有缘分，这几天的闷头搞事竟然还算摸到了一点 ECS 的边。选语言也是放着一众 OOP 不管一头扎进了函数式的坑，偏偏玩的还很菜。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;移动</description>
        
      
      
      
      <content:encoded><![CDATA[<p><span class="spoiler blur" title="你知道得太多了">我还真时跟对象没有缘分，这几天的闷头搞事竟然还算摸到了一点 ECS 的边。选语言也是放着一众 OOP 不管一头扎进了函数式的坑，偏偏玩的还很菜。</span></p><h2 id="移动"><a class="anchor" href="#移动">#</a> 移动</h2><div class="note default no-icon"><p>本来以为近期可能不太有什么可以说道的事了，还是低估了游戏开发的奥妙，从头搭建一个世界真的是塔诺西呐。</p></div><p>移动这个过程首先是转向，面向要前往的方向，开始前进是一个很自然，很符合直觉的过程，所以这里我也加上了需要转过身来才能移动的限制。</p><div class="note info"><p>这里直接使用了我觉得很妙的组织方法，如果说可能有潜在的性能问题，应该也能方便的转写成 ECS 的模式（大概）</p></div><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Unity 会自动为我们添加依赖的 Rigidbody 组件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token function">RequireComponent</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Rigidbody2D</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Movable</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">Rigidbody2D</span> rigid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 可移动单位的属性</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name"><span class="token keyword">float</span></span> moveSpeed <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name"><span class="token keyword">float</span></span> rotateSpeed <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 移动过程的参数</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token class-name">Vector2</span> destination<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token return-type class-name">Vector2</span> direction <span class="token operator">=></span> destination <span class="token operator">-</span> rigid<span class="token punctuation">.</span>position<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token class-name"><span class="token keyword">bool</span></span> isMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 一些温暖人心的状态判断</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsIdling <span class="token operator">=></span> <span class="token operator">!</span>isMoving<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsMoveFinished</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> destination<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>isMoving <span class="token operator">&amp;&amp;</span> rigid<span class="token punctuation">.</span>position <span class="token operator">==</span> destination<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 对外放出的功能</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveTo</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> destination<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>destination <span class="token operator">=</span> destination<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        isMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Interupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        isMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        isMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// Use this for initialization</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        rigid <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token comment">// Update is called once per frame</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isMoving<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token comment">// 首先旋转</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token class-name"><span class="token keyword">var</span></span> lookRotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">LookRotation</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span>forward<span class="token punctuation">,</span> direction<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token comment">// 计算当前帧应该进行的转动</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token class-name"><span class="token keyword">var</span></span> rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">RotateTowards</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span> lookRotation<span class="token punctuation">,</span> Time<span class="token punctuation">.</span>deltaTime <span class="token operator">*</span> rotateSpeed<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token comment">// 当前方向与目标的夹角</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token class-name"><span class="token keyword">float</span></span> angle <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Angle</span><span class="token punctuation">(</span>lookRotation<span class="token punctuation">,</span> transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token comment">// 转身，同时碰撞带来的避免不必要的乱转</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>angle <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                rigid<span class="token punctuation">.</span>freezeRotation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> rotation<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> rigid<span class="token punctuation">.</span>freezeRotation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token comment">// 当角度小于 15 度时可以移动</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>angle <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                <span class="token class-name">Vector2</span> move <span class="token operator">=</span> Vector2<span class="token punctuation">.</span><span class="token function">MoveTowards</span><span class="token punctuation">(</span>rigid<span class="token punctuation">.</span>position<span class="token punctuation">,</span> destination<span class="token punctuation">,</span> Time<span class="token punctuation">.</span>deltaTime <span class="token operator">*</span> moveSpeed<span class="token operator">*</span><span class="token number">0.02f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                rigid<span class="token punctuation">.</span>position <span class="token operator">=</span> move<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                <span class="token comment">// 到达目的地</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>destination <span class="token operator">==</span> rigid<span class="token punctuation">.</span>position<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                    isMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这样一个独立的移动组件就完成了，当后面需要进行寻路等一大堆让人头大的操作时就可以方便的重写了！<br />同样得益于独立性，可以自由的想让谁移动就让谁移动了。</p><hr /><p>然而事情似乎也并没有如此简单，指令 —— 移动、攻击、巡逻，是要有一个队列的。而后两种指令，也都是在移动的基础上添加的变化。</p><h2 id="指令队列"><a class="anchor" href="#指令队列">#</a> 指令队列</h2><h3 id="指令"><a class="anchor" href="#指令">#</a> 指令</h3><p>首先考虑一个抽象的指令，仅需要它的目的地，和判断是否生成一个后继指令就够了。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InstructionIntent</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token return-type class-name">Vector2</span> Destination <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Derive</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name">InstructionIntent</span> derived<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这样移动和巡逻指令很简单：</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">MoveIntent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">InstructionIntent</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">Vector2</span> position<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">Vector2</span> Destination <span class="token operator">=></span> position<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">MoveIntent</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Derive</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name">InstructionIntent</span> derived<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        derived <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">PatrolIntent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">InstructionIntent</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token class-name">Vector2</span> <span class="token keyword">from</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token class-name">Vector2</span> to<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">Vector2</span> Destination <span class="token operator">=></span> to<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">PatrolIntent</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token class-name">Vector2</span> to<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>to <span class="token operator">=</span> to<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Derive</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name">InstructionIntent</span> derived<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        derived <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PatrolIntent</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>由于巡逻到目标点后，显然根据现实经验我们需要返回原点，所以指令完成后需要产生出新的指示返回的指令。</p><div class="note info"><p>攻击指令涉及到另外的攻击组件，恐怕不能如此简化，不过暂且先放在这里。</p></div><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">AttackIntent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">InstructionIntent</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">GameObject</span> target<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name">Vector2</span> Destination<span class="token operator">=></span>target<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Transform<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token function">AttackIntent</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Derive</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name">InstructionIntent</span> derived<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        derived <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="队列"><a class="anchor" href="#队列">#</a> 队列</h3><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">Queue<span class="token punctuation">&lt;</span>InstructionIntent<span class="token punctuation">></span></span> instructions <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">Stack<span class="token punctuation">&lt;</span>InstructionIntent<span class="token punctuation">></span></span> patrolSencondaryInstructions <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>为了应对一连串的巡逻指令，实现逐点往返，很明显能想到这是一个栈，在当前指令队列全部完成后，将栈倒进队列，就实现了往复循环。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 如果指令队列里存在指令，处理指令</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>instructions<span class="token punctuation">.</span><span class="token function">TryPeek</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> current<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    </pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>movableUnit<span class="token punctuation">.</span><span class="token function">IsMoveFinished</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>Destination<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token comment">// 如果已到达目的地</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        </pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 是否有派生移动</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">Derive</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> next<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            patrolSencondaryInstructions<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        instructions<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token comment">// 如果完成移动后队列为空，查看派生移动栈</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instructions<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>patrolSencondaryInstructions<span class="token punctuation">.</span><span class="token function">TryPop</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> i<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                instructions<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>movableUnit<span class="token punctuation">.</span>IsIdling<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token comment">// 移动</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        movableUnit<span class="token punctuation">.</span><span class="token function">MoveTo</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>随后检测地图上的鼠标右键事件，队列清空，停止移动，随后放入新指令。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// move or attack</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Mouse1<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>EventSystem<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">IsPointerOverGameObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    mainPlay<span class="token punctuation">.</span>selectedShips<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>o <span class="token operator">=></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        o<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Warship<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instructions<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        o<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Warship<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        o<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Warship<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instructions<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MoveIntent</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="note default"><p>此处并未判断队列输入，不过并不复杂。</p></div><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220616121214.png" alt="分散队形" /></p>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/conquest-of-star/">conquest of star</category>
      
      
      <category domain="https://blog.yukx.io/tags/Unity/">Unity</category>
      
      <category domain="https://blog.yukx.io/tags/%E5%8D%95%E4%BD%8D%E7%A7%BB%E5%8A%A8/">单位移动</category>
      
      
      <comments>https://blog.yukx.io/2022/06/game-dev-journal-3-unit-move/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>游戏开发日志(其二)：单位选择、小地图:续</title>
      <link>https://blog.yukx.io/2022/06/game-dev-journal-2-unit-selection-and-minimap-more/</link>
      <guid>https://blog.yukx.io/2022/06/game-dev-journal-2-unit-selection-and-minimap-more/</guid>
      <pubDate>Sun, 12 Jun 2022 06:32:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;如果有人看了上一篇，可能已经稍微有点感觉，我们要做的是不是 RTS 游戏呢？—— 很难说不是。&lt;/p&gt;
&lt;h2 id=&quot;参演物体&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#参演物体&quot;&gt;#&lt;/a&gt; 参演物体&lt;/h2&gt;
&lt;p&gt;依照惯例，首先创建一个&lt;ruby&gt;竞技场&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>如果有人看了上一篇，可能已经稍微有点感觉，我们要做的是不是 RTS 游戏呢？—— 很难说不是。</p><h2 id="参演物体"><a class="anchor" href="#参演物体">#</a> 参演物体</h2><p>依照惯例，首先创建一个<ruby>竞技场<rp> (</rp><rt>Arena</rt><rp>)</rp></ruby> 作为整场游戏的地图。<br />Boundary 作为地图边界限制物体移动。<br /><ruby>战舰<rp> (</rp><rt>Warship</rt><rp>)</rp></ruby> 作为 Prefab 自然就是单位啦。</p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220613110559.png" alt="objects" /></p><div class="note default no-icon"><p>此处也能看到在上一篇中未展示的<ruby>小地图指示器<rp> (</rp><rt>Map   Indicator</rt><rp>)</rp></ruby></p></div><h2 id="框选单位"><a class="anchor" href="#框选单位">#</a> 框选单位</h2><h3 id="单位选择的思路"><a class="anchor" href="#单位选择的思路">#</a> 单位选择的思路</h3><p>选中单位的视觉标识</p><blockquote><p>单位具有被选中属性</p></blockquote><p>鼠标框选</p><blockquote><p>框体素材、跟随鼠标</p></blockquote><p>鼠标左键点击与拖动框选的统一</p><blockquote><p>被框选、点击物体的判断</p></blockquote><h3 id="单位-warship"><a class="anchor" href="#单位-warship">#</a> 单位 - Warship</h3><p>给绑定到单位的脚本中添加如下内容</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsSelected <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    selectionIndicator<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span>IsSelected<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="选择框"><a class="anchor" href="#选择框">#</a> 选择框</h3><h4 id="外观"><a class="anchor" href="#外观">#</a> 外观</h4><p>选择框的外观经过权衡选择使用 LineRenderer 实现，将它的 Size 设置为 5 以容纳一个四边闭合的矩形线框，具体的点我们在脚本里计算。<br />给它一个白色的材质，随意设置一个你喜欢的颜色，并调整宽度到合适。<br />要注意的是将 <ins class="dot">Use World Space 取消选中</ins>，这样绘制出来的框体就会跟随物体的位置。</p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220613125446.png" alt="selection box" /></p><p>现在我们来处理鼠标。</p><p>首先是左键按下，确定了一个点，随后在拖动中更新另一个点绘制线框，在鼠标抬起后确定了另一个点。</p><p>记录鼠标起点，通过判断 nullable 来确定鼠标是否已经按下。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Vector3<span class="token punctuation">?</span></span> selection_start_mouse_position<span class="token punctuation">;</span></pre></td></tr></table></figure><p>总是会用到的鼠标当前位置</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Vector3</span> position <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenToWorldPoint</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>鼠标按下，激活选择框对象，记录位置，这里面的判断是为了避开上层的 UI 元素，你也不想点小地图就取消了当前单位的选择对吧。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Mouse0<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>EventSystem<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">IsPointerOverGameObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    selection_start_mouse_position <span class="token operator">=</span> position<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    selectionBox<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>鼠标拖动时，调整 LineRenderer 不必说，随后需要调整整个物体的中心位置，确保起始点不变。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Mouse0<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selection_start_mouse_position <span class="token keyword">is</span> <span class="token class-name">Vector3</span> sp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">Vector3</span> size <span class="token operator">=</span> position <span class="token operator">-</span> sp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        size<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name"><span class="token keyword">var</span></span> half_size <span class="token operator">=</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        selectionBox<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LineRenderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetPositions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">-</span>half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">-</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">-</span>half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">-</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span>half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        selectionBox<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> position <span class="token operator">-</span> half_size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在抬起鼠标时，重置大小并隐藏。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyUp</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Mouse0<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selection_start_mouse_position <span class="token keyword">is</span> <span class="token class-name">Vector3</span> sp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        selectionBox<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        selectionBox<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LineRenderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetPositions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        selection_start_mouse_position <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="功能"><a class="anchor" href="#功能">#</a> 功能</h4><p>一个很自然的想法是使用起始两点确定的矩形，判断单位是否在矩形内部，不过这样有个小问题，使用中心点判断时需要确保中心点在矩形的内部，不能轻易的实现符合视觉预期的效果，所以我选择了碰撞体。</p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220613140415.png" alt="碰撞体" /></p><p>在鼠标拖动时添加如下代码调整碰撞体大小，需要注意的是碰撞体的 size 参数需要保证顶点距离不能过小或为负。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td data-command=""></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Mouse0<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td data-command=""></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td data-command=""></td><td><pre>    position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td data-command=""></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td data-command=""></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selection_start_mouse_position <span class="token keyword">is</span> <span class="token class-name">Vector3</span> sp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td data-command=""></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td data-command=""></td><td><pre>        <span class="token class-name">Vector3</span> size <span class="token operator">=</span> position <span class="token operator">-</span> sp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td data-command=""></td><td><pre>        size<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td data-command=""></td><td><pre>        <span class="token class-name"><span class="token keyword">var</span></span> half_size <span class="token operator">=</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td data-command=""></td><td><pre>        selectionBox<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LineRenderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetPositions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span></span></pre></td></tr><tr><td data-num="12"></td><td data-command=""></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td data-command=""></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td data-command=""></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">-</span>half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td data-command=""></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">-</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">-</span>half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td data-command=""></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">-</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span>half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td data-command=""></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span>half_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> half_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td data-command=""></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td data-command="*"></td><td><pre>        selectionBox<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BoxCollider2D<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">Abs</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.01f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">Abs</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.01f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td data-command=""></td><td><pre>        selectionBox<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> position <span class="token operator">-</span> half_size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td data-command=""></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td data-command=""></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在鼠标抬起时，首先取消之前的选中，然后通过 <code>OverlapCollider</code>  取得重叠的碰撞体，并选中这些碰撞体对应的单位。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyUp</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Mouse0<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selection_start_mouse_position <span class="token keyword">is</span> <span class="token class-name">Vector3</span> sp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> ship <span class="token keyword">in</span> mainPlay<span class="token punctuation">.</span>selectedShips<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            ship<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Warship<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsSelected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        mainPlay<span class="token punctuation">.</span>selectedShips<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">List<span class="token punctuation">&lt;</span>Collider2D<span class="token punctuation">></span></span> shipColliders <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        selectionBox<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BoxCollider2D<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OverlapCollider</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContactFilter2D</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                useLayerMask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                layerMask <span class="token operator">=</span> LayerMask<span class="token punctuation">.</span><span class="token function">GetMask</span><span class="token punctuation">(</span><span class="token string">"Unit"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> shipColliders<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        mainPlay<span class="token punctuation">.</span>selectedShips <span class="token operator">=</span> shipColliders<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>c <span class="token operator">=></span> c<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> ship <span class="token keyword">in</span> mainPlay<span class="token punctuation">.</span>selectedShips<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            ship<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Warship<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsSelected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>        selectionBox<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        selectionBox<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LineRenderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetPositions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        selection_start_mouse_position <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="note info"><p>此处使用了 ContactFilter 来排除其他层中的物体。<br />目前并未进行单位阵营归属的判断。</p></div><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220613180430.png" alt="示例" /></p><p>至此，框选功能完成。</p><h2 id="小地图续更多的交互"><a class="anchor" href="#小地图续更多的交互">#</a> 小地图：续，更多的交互</h2><p>在上一篇中只是实现了小地图的显示功能，下面开始完善。</p><h3 id="显示当前镜头范围"><a class="anchor" href="#显示当前镜头范围">#</a> 显示当前镜头范围</h3><p>也就是小地图上的白框，我们可以延续之前显示单位缩略图的思路，给 Main Camera 添加一个 minimap 层的子物体。</p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220613142422.png" alt="子物体" /></p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220613142502.png" alt="子物体" /></p><p>同样使用 LineRenderer 来绘制。<br />只需要在游戏初始化的时候设置一下。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 获取主摄像头范围</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    half_cam_size <span class="token operator">=</span> <span class="token punctuation">(</span>Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenToWorldPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenToWorldPoint</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    GameObject<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"Camera Range"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LineRenderer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetPositions</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">-</span>half_cam_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> half_cam_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span>half_cam_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> half_cam_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span>half_cam_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>half_cam_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">-</span>half_cam_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>half_cam_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">-</span>half_cam_size<span class="token punctuation">.</span>x<span class="token punctuation">,</span> half_cam_size<span class="token punctuation">.</span>y<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220613180548.png" alt="示例" /></p><h3 id="点击小地图移动镜头"><a class="anchor" href="#点击小地图移动镜头">#</a> 点击小地图移动镜头</h3><p>由于  <code>Input.GetXX</code>  会作用于全局，为了避免不必要的判断，作为 UI 组件可以使用  <code>IPointerDownHandler</code>  系列接口获取点击事件。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPointerDown</span><span class="token punctuation">(</span><span class="token class-name">PointerEventData</span> eventData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Vector2</span> ratio <span class="token operator">=</span> <span class="token punctuation">(</span>eventData<span class="token punctuation">.</span>position <span class="token operator">-</span> Vector2<span class="token punctuation">.</span>one <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>ratio<span class="token punctuation">.</span>x <span class="token operator">*</span> mainPlay<span class="token punctuation">.</span>MapSize<span class="token punctuation">.</span>x<span class="token punctuation">,</span> ratio<span class="token punctuation">.</span>y <span class="token operator">*</span> mainPlay<span class="token punctuation">.</span>MapSize<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>小地图的大小目前设置为 200，故鼠标事件的位置需要减去一半大小后再除以 200 得到点击位置相对于全图的比例。<br />注意不要改动摄像机高度。</p><p>更进一步。</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token keyword">bool</span></span> map_operation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// Update is called once per frame</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map_operation <span class="token operator">&amp;&amp;</span> Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Mouse0<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">Vector3</span> p <span class="token operator">=</span> Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        </pre></td></tr><tr><td data-num="9"></td><td><pre>        p<span class="token punctuation">.</span>x <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        p<span class="token punctuation">.</span>y <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">Vector2</span> ratio <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> Vector3<span class="token punctuation">.</span>one <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>ratio<span class="token punctuation">.</span>x <span class="token operator">*</span> mainPlay<span class="token punctuation">.</span>MapSize<span class="token punctuation">.</span>x<span class="token punctuation">,</span> ratio<span class="token punctuation">.</span>y <span class="token operator">*</span> mainPlay<span class="token punctuation">.</span>MapSize<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPointerDown</span><span class="token punctuation">(</span><span class="token class-name">PointerEventData</span> eventData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    map_operation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPointerUp</span><span class="token punctuation">(</span><span class="token class-name">PointerEventData</span> eventData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    map_operation<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/conquest-of-star/">conquest of star</category>
      
      
      <category domain="https://blog.yukx.io/tags/Unity/">Unity</category>
      
      <category domain="https://blog.yukx.io/tags/%E9%BC%A0%E6%A0%87%E6%A1%86%E9%80%89%E5%8D%95%E4%BD%8D/">鼠标框选单位</category>
      
      <category domain="https://blog.yukx.io/tags/%E5%B0%8F%E5%9C%B0%E5%9B%BE%E4%BA%A4%E4%BA%92/">小地图交互</category>
      
      
      <comments>https://blog.yukx.io/2022/06/game-dev-journal-2-unit-selection-and-minimap-more/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>游戏开发日志(其一)：HUD、小地图</title>
      <link>https://blog.yukx.io/2022/06/game-dev-journal-1-hud-minimap/</link>
      <guid>https://blog.yukx.io/2022/06/game-dev-journal-1-hud-minimap/</guid>
      <pubDate>Sat, 11 Jun 2022 18:38:51 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;note default no-icon&quot;&gt;
&lt;p&gt;某人日常不务正业务现已开拓至游戏开发挥年复一年的沉积极放光吧！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note default&quot;&gt;
&lt;p&gt;游戏具体情况暂且不提，后续也将在 github 上开源。&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="note default no-icon"><p>某人日常不务正业务现已开拓至游戏开发挥年复一年的沉积极放光吧！</p></div><div class="note default"><p>游戏具体情况暂且不提，后续也将在 github 上开源。</p></div><h2 id="hud"><a class="anchor" href="#hud">#</a> HUD</h2><p>首先我们秉持优良传统，创建一个根 GameObject，<br />在其内部添加 Canvas，在 Canvas 内添加我们需要的 UI 物体即可。<br /><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/object-hierachy.png" alt="对象层级示例" /></p><h2 id="小地图"><a class="anchor" href="#小地图">#</a> 小地图</h2><p>小地图有很多种实现方法，这里暂且采用最简单的，添加第二个 Camera 的方法。</p><h3 id="custom-render-texture"><a class="anchor" href="#custom-render-texture">#</a> Custom Render Texture</h3><p>首先新建一个 Custom Render Texture, 用于接收摄像机的内容并显示在指定位置。</p><h3 id="map-camera"><a class="anchor" href="#map-camera">#</a> Map Camera</h3><p>新建一个 Camera，并创建一个 layer: minimap，用于显示单位的缩略图。</p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220612140021.png" alt="Camera 属性" /></p><p>设置 Clear Flag 为 Solid Color ，<ruby> <rt></rt>投影<rp> (</rp><rt>Projection</rt><rp>)</rp> <rt></rt></ruby>为<ruby> <rt></rt>正交<rp> (</rp><rt>Orthographic</rt><rp>)</rp> <rt></rt></ruby>，以排除透视的影响。<br />设置 <strong>Culling Mask</strong> 取消选中其他 layer 仅保留刚刚新建的 minimap，这样小地图中不会显示多余的内容。(在其他 Camera 中也需要保持不要选中 minimap)</p><p>设置 Target Texture 为刚刚创建的 Custom Render Texture。</p><h3 id="minimap"><a class="anchor" href="#minimap">#</a> Minimap</h3><p>在你喜欢的地方添加一个  <code>UI &gt; Raw Image</code> ，将其 Texture 设置为刚刚创建的 Custom Render Texture。<br />至此小地图的基本显示功能完成，后续需要在想要显示在地图中的物体内完成。</p><h3 id="其他单位"><a class="anchor" href="#其他单位">#</a> 其他单位</h3><p>在想要显示的物体内添加一个 Sprite，指定其 Layer 为 minimap。</p><p><img data-src="https://fastly.jsdelivr.net/gh/hxYuki/im-base@master/20220612143055.png" alt="示例效果" /></p><p>大功告成！</p><div class="note info"><p>Camera size 与 Worldspace 内的坐标尺度一致，可按需要调整地图大小。</p></div>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/">游戏开发</category>
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/conquest-of-star/">conquest of star</category>
      
      
      <category domain="https://blog.yukx.io/tags/Unity/">Unity</category>
      
      <category domain="https://blog.yukx.io/tags/HUD/">HUD</category>
      
      <category domain="https://blog.yukx.io/tags/%E5%B0%8F%E5%9C%B0%E5%9B%BE/">小地图</category>
      
      
      <comments>https://blog.yukx.io/2022/06/game-dev-journal-1-hud-minimap/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Steam记住密码失效的一种原因</title>
      <link>https://blog.yukx.io/2022/06/one-possible-reason-for-steam-not-rememebering-password/</link>
      <guid>https://blog.yukx.io/2022/06/one-possible-reason-for-steam-not-rememebering-password/</guid>
      <pubDate>Thu, 02 Jun 2022 06:14:28 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;你可能有第二个设备在登录时记住了密码，第一个设备就无法记住密码了。&lt;/p&gt;
&lt;p&gt;取消所有其他设备授权也没有用，&lt;br /&gt;
实在是让我恼火了好久，直到今天打开了很久没用的另一个电脑，退出了上面的 Steam。&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>你可能有第二个设备在登录时记住了密码，第一个设备就无法记住密码了。</p><p>取消所有其他设备授权也没有用，<br />实在是让我恼火了好久，直到今天打开了很久没用的另一个电脑，退出了上面的 Steam。</p>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E9%97%B2%E8%AF%9D/">闲话</category>
      
      
      <category domain="https://blog.yukx.io/tags/Steam%E6%97%A0%E6%B3%95%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81/">Steam无法记住密码</category>
      
      <category domain="https://blog.yukx.io/tags/Steam/">Steam</category>
      
      
      <comments>https://blog.yukx.io/2022/06/one-possible-reason-for-steam-not-rememebering-password/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rust初体验</title>
      <link>https://blog.yukx.io/2022/03/rust-try/</link>
      <guid>https://blog.yukx.io/2022/03/rust-try/</guid>
      <pubDate>Sat, 26 Mar 2022 06:10:56 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;近日来心有戚戚终日惶惶，游戏亦觉无趣，便想着尝试下一直以来想学下的 Rust&lt;/p&gt;
&lt;p&gt;直接进行一个&lt;a href=&quot;https://kaisery.github.io/trpl-zh-cn/title-page.html&quot;&gt; The Book&lt;/a&gt; 的搜索！ &lt;sp</description>
        
      
      
      
      <content:encoded><![CDATA[<p>近日来心有戚戚终日惶惶，游戏亦觉无趣，便想着尝试下一直以来想学下的 Rust</p><p>直接进行一个<a href="https://kaisery.github.io/trpl-zh-cn/title-page.html"> The Book</a> 的搜索！ <span class="rainbow">汉化赛高！</span> <span class="spoiler" title="你知道得太多了">话说这个中文版的 Rust 竟然比官网还高</span></p><p>直接进行一个小练！</p><p>看完了前三章，算是对语法方面做了个基本的了解，体验下来有种奇妙的舒适感，比如变量隐藏、 <code>.expect()</code>  或 <code>match</code>  进行的错误处理、或是 <code>break</code>  返回值这种东西在有需要的时候真的是能极大的提升幸福感，让人对后面的内容产生了更浓厚的期待。</p><p>浅尝至此，暂且搁笔。另请允许我附上自己渣的斐波那契数列。</p><figure class="highlight rust"><figcaption data-lang="rust"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"failed to open input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"failed to parse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">let</span> <span class="token keyword">mut</span> a<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">let</span> <span class="token keyword">mut</span> b<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token macro property">println!</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">match</span> n <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token number">1</span> <span class="token operator">=></span> a<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token number">2</span> <span class="token operator">=></span> b<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            _ <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">let</span> <span class="token keyword">mut</span> r<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">3</span><span class="token punctuation">..=</span>n <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                        a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                        r <span class="token operator">=</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                        b <span class="token operator">=</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                        r <span class="token operator">=</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                r</pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E4%BF%97%E4%B8%96%E4%BB%A5%E5%A4%96%E7%9A%84%E6%B6%88%E9%81%A3/">俗世以外的消遣</category>
      
      
      <category domain="https://blog.yukx.io/tags/Rust/">Rust</category>
      
      <category domain="https://blog.yukx.io/tags/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/">学习随记</category>
      
      
      <comments>https://blog.yukx.io/2022/03/rust-try/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>让静态的博客飞起来</title>
      <link>https://blog.yukx.io/2021/11/%E8%AE%A9%E9%9D%99%E6%80%81%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A3%9E%E8%B5%B7%E6%9D%A5/</link>
      <guid>https://blog.yukx.io/2021/11/%E8%AE%A9%E9%9D%99%E6%80%81%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A3%9E%E8%B5%B7%E6%9D%A5/</guid>
      <pubDate>Tue, 16 Nov 2021 05:54:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;最近终于算是折腾完了博客、主题这些&lt;s&gt;要命&lt;/s&gt;的东西，中途还给咱选择的主题修了 BUG &lt;span class=&quot;spoiler&quot; title=&quot;你知道得太多了&quot;&gt;一度还因为 BUG 想自己写主题来着的说&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;不过，终于，现在一切都已经妥当，</description>
        
      
      
      
      <content:encoded><![CDATA[<p>最近终于算是折腾完了博客、主题这些<s>要命</s>的东西，中途还给咱选择的主题修了 BUG <span class="spoiler" title="你知道得太多了">一度还因为 BUG 想自己写主题来着的说</span>。</p><p>不过，终于，现在一切都已经妥当，让 CDN 什么的先在一边放着吧！我要开始输出了！我看着托管博客的仓库，突然邪念大起：</p><p>「用 Github Actions 自动部署博客已经是基操了，再加上 Github Codespaces 岂不是就再也不用被仓库的位置限制了？」</p><p>不过这套流程的难点还是在于要配置好 Github Actions 的自动部署，大体流程而言都差不多，生成一对密钥，公钥放  <code>[username].github.io</code>  ，私钥放到博客源仓库的  <code>secret</code>  中，在市场里找一套部署 Hexo 的 Action 就大功告成 ——</p><p>Star 最多的 hexo-action 只有简单的部署操作，而本博客启用了基于 algolia 的搜索功能，需要在部署前将改动同步至 Algolia ，又不想花时间再精挑细选了，于是动了下脑子，基于 hexo-action 添加了一份执行  <code>hexo a</code>  的选项<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，这下就完美解决了个人的需求，可以愉快的随处<ruby>写<rp> (</rp><rt>guan</rt><rp>)</rp> 文章<rp> (</rp><rt>shui</rt><rp>)</rp></ruby> 了！</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>个人魔改的 hexo action 为  <code>hxYuki/hexo-action@master</code>  欢迎取用。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E7%94%9F%E5%91%BD%E5%9C%A8%E4%BA%8E%E6%8A%98%E8%85%BE/">生命在于折腾</category>
      
      <category domain="https://blog.yukx.io/categories/%E7%94%9F%E5%91%BD%E5%9C%A8%E4%BA%8E%E6%8A%98%E8%85%BE/MyBlog/">MyBlog</category>
      
      
      <category domain="https://blog.yukx.io/tags/%E8%A8%80%E5%B0%BD%E4%BA%8E%E8%A1%8C/">言尽于行</category>
      
      <category domain="https://blog.yukx.io/tags/%E5%BC%80%E5%8F%91%E4%B9%8B%E5%A4%96%E7%9A%84%E4%BA%8B/">开发之外的事</category>
      
      <category domain="https://blog.yukx.io/tags/Github-Codespaces/">Github Codespaces</category>
      
      <category domain="https://blog.yukx.io/tags/Github-Actions/">Github Actions</category>
      
      <category domain="https://blog.yukx.io/tags/Algolia/">Algolia</category>
      
      
      <comments>https://blog.yukx.io/2021/11/%E8%AE%A9%E9%9D%99%E6%80%81%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A3%9E%E8%B5%B7%E6%9D%A5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C# 的一些问题操作</title>
      <link>https://blog.yukx.io/2021/10/CSharp%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%93%8D%E4%BD%9C/</link>
      <guid>https://blog.yukx.io/2021/10/CSharp%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%93%8D%E4%BD%9C/</guid>
      <pubDate>Wed, 27 Oct 2021 16:45:24 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前情提要&quot;&gt;#&lt;/a&gt; 前情提要&lt;/h2&gt;
&lt;p&gt;作为 &lt;code&gt;async&lt;/code&gt;   &lt;code&gt;await&lt;/code&gt;  关键字源头的 C#，搞些异步操作已经是很舒心的了，不过近来 &lt;c</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前情提要"><a class="anchor" href="#前情提要">#</a> 前情提要</h2><p>作为 <code>async</code>   <code>await</code>  关键字源头的 C#，搞些异步操作已经是很舒心的了，不过近来 <code>.Net 6</code>  就要出了，新版本里默认启用了 <code>nullable</code>  特性，当享受着全局的空安全的时候，可能莫名其妙的发现有些地方出现了碍眼的<ins class="wavy success">绿色下划波浪线</ins>。 💢</p><h2 id="问题"><a class="anchor" href="#问题">#</a> 问题</h2><p>问题代码多半是这样:</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">await</span> something<span class="token punctuation">?.</span><span class="token function">BalaBala</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>然后警告你<ruby>解引用了一个可能为空的引用<rp> (</rp><rt>Dereference  of  a possibly null reference</rt><rp>)</rp></ruby>。<br />这是因为 <code>?.</code>  操作符在变量为 <code>null</code>  的时候会把自己整段都变为 <code>null</code> ，也就是说整个 <code>await</code>  等待了一个 <code>Task&lt;ReturnType&gt;?</code> ，而目前的 <code>await</code>  并不想等待一个寂寞。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="workaround"><a class="anchor" href="#workaround">#</a> Workaround</h2><p>作为有些许追求的人，一定要找个比较优雅的写法，结合了一些观察学习，我的答案是：</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FunExt</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">SafeExecute</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Task<span class="token punctuation">?</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>task<span class="token operator">??</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>考虑到可能的执行失败时需要默认值的情况，可以加一个这个: <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> <span class="spoiler" title="你知道得太多了">？强烈怀疑，真的会有这种需求吗</span></p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">?</span><span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">SafeExecute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">?</span><span class="token punctuation">></span><span class="token punctuation">?</span></span> task<span class="token punctuation">)</span> <span class="token operator">=></span> task <span class="token operator">??</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用方式为：</p><figure class="highlight csharp"><figcaption data-lang="C#"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">await</span> <span class="token punctuation">(</span>something<span class="token punctuation">?.</span><span class="token function">BalaBalaA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SafeExcute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>虽然还是没能避免多加一对括号，不过总比去进行麻烦的判断要好了那么一点。</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>确实有这么一个新特性的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9jc2hhcnBsYW5nL2Jsb2IvbWFpbi9wcm9wb3NhbHMvbnVsbC1jb25kaXRpb25hbC1hd2FpdC5tZA==" title="null conditional await">提议</span>，我开始看了觉得不明所以，直到自己被警告秀了一脸 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>原写法来自 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc1NTEwOTAvYmVzdC13YXktdG8taGFuZGxlLW51bGwtdGFzay1pbnNpZGUtYXN5bmMtbWV0aG9k" title="By BrainSlugs83">StackOverflow</span> 不过其并未考虑到 <code>default(T)</code>  的类型为 <code>T?</code> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E8%AE%B0/">开发随记</category>
      
      
      <category domain="https://blog.yukx.io/tags/%E8%A8%80%E5%B0%BD%E4%BA%8E%E8%A1%8C/">言尽于行</category>
      
      <category domain="https://blog.yukx.io/tags/C/">C#</category>
      
      <category domain="https://blog.yukx.io/tags/await/">await</category>
      
      <category domain="https://blog.yukx.io/tags/nullable/">nullable</category>
      
      
      <comments>https://blog.yukx.io/2021/10/CSharp%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%93%8D%E4%BD%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于一个配置文件hint工具的想法</title>
      <link>https://blog.yukx.io/2021/07/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6hint%E5%B7%A5%E5%85%B7%E7%9A%84%E6%83%B3%E6%B3%95/</link>
      <guid>https://blog.yukx.io/2021/07/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6hint%E5%B7%A5%E5%85%B7%E7%9A%84%E6%83%B3%E6%B3%95/</guid>
      <pubDate>Tue, 20 Jul 2021 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;始&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#始&quot;&gt;#&lt;/a&gt; 始&lt;/h2&gt;
&lt;p&gt;最近试着弄了下一直想做的博客，选主题选的眼都花了（笑），然而年幼无知的我还不知道后面有什么东西在等着我 —— 指一大堆乱七八糟的配置文件，它们天真而又纯洁，等着我来带它们</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="始"><a class="anchor" href="#始">#</a> 始</h2><p>最近试着弄了下一直想做的博客，选主题选的眼都花了（笑），然而年幼无知的我还不知道后面有什么东西在等着我 —— 指一大堆乱七八糟的配置文件，它们天真而又纯洁，等着我来带它们走向光明的未来。<br />其实认真的讲，我个人始终有一种追求：人应该尽可能少的进行没有意义劳作，而很明显，如果我想以一种预先约定的格式进行输入，而需要我全面学习这个约定，否则便无从知晓某一项是否被包含在约定中，也算是部分无意义 —— 个人来讲倾向于在尝试中学习，如果能在输入的时候把可用的项目全部提供就很令人舒适，要是命名又十分直观真是再感激不过了。</p><p>其实在此之前有遇到过包含自动提示的配置文件，比如 <code>VS Code</code>  自身的配置文件，或者是 <code>Visual Studio</code>  的 <code>JSON 架构</code> ，都能实现配置项、配置值的提示，不过一个是靠编辑器本身开挂，一个普及度低写起来也繁琐的一 * 并且还是依赖了编辑器的外挂从网络获取架构信息。<br />所以我想的是为配置文件写一个配置文件，再写个编辑器扩展什么的来进行 Hint。编写起来也得很简洁才行，方便使用。<span class="spoiler" title="你知道得太多了">毕竟我也是个臭敲代码的，代码以外的东西越简单越好</span></p><h2 id="初步的设计"><a class="anchor" href="#初步的设计">#</a> 初步的设计</h2><h3 id="specs"><a class="anchor" href="#specs">#</a> Specs</h3><p>文件名： <code>.hintc</code> <br /> 对于同目录内所有子目录均有效，且覆盖父目录中的 <code>.hintc</code>  文件</p><figure class="highlight raw"><figcaption data-lang=""></figcaption><table><tr><td data-num="1"></td><td><pre>config.json &gt;</pre></td></tr><tr><td data-num="2"></td><td><pre>    * connection &gt;</pre></td></tr><tr><td data-num="3"></td><td><pre>        * username &#x3D; string</pre></td></tr><tr><td data-num="4"></td><td><pre>        * password &#x3D; string</pre></td></tr><tr><td data-num="5"></td><td><pre>    - options &gt; </pre></td></tr><tr><td data-num="6"></td><td><pre>        - encryption &#x3D; bool</pre></td></tr><tr><td data-num="7"></td><td><pre>        - method &#x3D; (foo, bar)</pre></td></tr><tr><td data-num="8"></td><td><pre>        - alternate_conn : @connection &#x2F;&#x2F; @config.json&gt;connection</pre></td></tr><tr><td data-num="9"></td><td><pre>        - timeout &#x3D; number</pre></td></tr><tr><td data-num="10"></td><td><pre>        - load :</pre></td></tr><tr><td data-num="11"></td><td><pre>            * type &#x3D; string</pre></td></tr><tr><td data-num="12"></td><td><pre>            * data &#x3D; string</pre></td></tr></table></figure><p>当前预计使用如下关键字 <code>string</code>   <code>bool</code>   <code>number</code>   <code>date</code>   <code>&gt;</code>   <code>=</code>   <code>:</code>   <code>*</code>   <code>-</code>   <code>@</code>   <code>(</code>   <code>)</code>   <code>,</code></p><p><code>&gt;</code>  表明项包含后续定义的字段<br /> <code>=</code>  表明该项接受一个直接值<br /> <code>:</code>  表明项接受一个其后类型的数组</p><p><code>*</code>  声明该项在父项中为必须项<br /> <code>-</code>  声明该项在父项中为可选项</p><p><code>string</code>   <code>bool</code>   <code>number</code>   <code>date</code>  等字符串于值类型标识<br /> <code>@</code>  后接一个已经定义过的项，其值与指向的项内容相同<br /> <code>(</code>   <code>)</code>  用于表示一个列表，其值为其中任意一个元素<br /> <code>,</code>  元素分隔</p><div class="note info note"><p>该类符号用于进行值验证，与正则表达式接近，但似乎无法实现详细的提示，需要进一步实现尝试。</p></div><h3 id="从声明文件生成其配置文件"><a class="anchor" href="#从声明文件生成其配置文件">#</a> 从声明文件生成其配置文件</h3><p>既然这么一个声明文件是具体配置无关的，那么理应可以通过扩展的形式支持多种配置文件。 e.g. JSON, yaml … <s>似乎一笔带过了什么难搞的东西</s></p><p>那么反过来从这一个声明文件生成一个样例配置文件应该也是可行的，于是就愉快的把坑挖大了。</p><h2 id="最后"><a class="anchor" href="#最后">#</a> 最后</h2><p>还没想好名字，不如叫 ConfHint 吧，后缀名确定是 hintc 了吗？</p><p><span class="spoiler blur" title="你知道得太多了">h 这个字母是真烦，前面可以接 80% 的字母都不意外</span></p>]]></content:encoded>
      
      
      <category domain="https://blog.yukx.io/categories/%E6%8C%96%E5%9D%91/">挖坑</category>
      
      <category domain="https://blog.yukx.io/categories/%E6%8C%96%E5%9D%91/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://blog.yukx.io/categories/%E6%8C%96%E5%9D%91/%E5%BC%80%E5%8F%91/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-Hint-%E5%B7%A5%E5%85%B7/">配置文件 Hint 工具</category>
      
      
      <category domain="https://blog.yukx.io/tags/%E6%80%9D%E7%BB%B4%E7%81%AB%E8%8A%B1/">思维火花</category>
      
      
      <comments>https://blog.yukx.io/2021/07/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6hint%E5%B7%A5%E5%85%B7%E7%9A%84%E6%83%B3%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://blog.yukx.io/2021/06/hello-world/</link>
      <guid>https://blog.yukx.io/2021/06/hello-world/</guid>
      <pubDate>Tue, 29 Jun 2021 06:20:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZXhvLmlvLw==&quot; title=&quot;1234&quot;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="1234">Hexo</span>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td data-command="&nbsp;$"></td><td><pre>hexo new <span class="token string">"My New Post"</span></pre></td></tr><tr><td data-num="2"></td><td data-command=""></td><td><pre><span class="token builtin class-name">pwd</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td data-command="&nbsp;$"></td><td><pre>hexo server</pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td data-command="&nbsp;$"></td><td><pre>hexo generate</pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td data-command="&nbsp;$"></td><td><pre>hexo deploy</pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      <category domain="https://blog.yukx.io/tags/hello-world/">hello world</category>
      
      
      <comments>https://blog.yukx.io/2021/06/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
